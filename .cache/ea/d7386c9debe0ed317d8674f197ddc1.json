{"id":"jdCv","dependencies":[{"name":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/reflectionFunction.js.map","includedInParent":true,"mtime":1556745103000},{"name":"/Users/hujy/GT/Spring20/3DU/3DPainter/package.json","includedInParent":true,"mtime":1588539929318},{"name":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/package.json","includedInParent":true,"mtime":1588537596306},{"name":"../../Materials/effect","loc":{"line":1,"column":23},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/reflectionFunction.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Materials/effect.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.reflectionFunction=void 0;var e=require(\"../../Materials/effect\"),n=\"reflectionFunction\",r=\"#ifdef USE_LOCAL_REFLECTIONMAP_CUBIC\\nvec3 parallaxCorrectNormal( vec3 vertexPos,vec3 origVec,vec3 cubeSize,vec3 cubePos ) {\\n\\nvec3 invOrigVec=vec3(1.0,1.0,1.0)/origVec;\\nvec3 halfSize=cubeSize*0.5;\\nvec3 intersecAtMaxPlane=(cubePos+halfSize-vertexPos)*invOrigVec;\\nvec3 intersecAtMinPlane=(cubePos-halfSize-vertexPos)*invOrigVec;\\n\\nvec3 largestIntersec=max(intersecAtMaxPlane,intersecAtMinPlane);\\n\\nfloat distance=min(min(largestIntersec.x,largestIntersec.y),largestIntersec.z);\\n\\nvec3 intersectPositionWS=vertexPos+origVec*distance;\\n\\nreturn intersectPositionWS-cubePos;\\n}\\n#endif\\nvec3 computeReflectionCoords(vec4 worldPos,vec3 worldNormal)\\n{\\n#if defined(REFLECTIONMAP_EQUIRECTANGULAR_FIXED) || defined(REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED)\\nvec3 direction=normalize(vDirectionW);\\nfloat lon=atan(direction.z,direction.x);\\nfloat lat=acos(direction.y);\\nvec2 sphereCoords=vec2(lon,lat)*RECIPROCAL_PI2*2.0;\\nfloat s=sphereCoords.x*0.5+0.5;\\nfloat t=sphereCoords.y;\\n#ifdef REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED\\nreturn vec3(1.0-s,t,0);\\n#else\\nreturn vec3(s,t,0);\\n#endif\\n#endif\\n#ifdef REFLECTIONMAP_EQUIRECTANGULAR\\nvec3 cameraToVertex=normalize(worldPos.xyz-vEyePosition.xyz);\\nvec3 r=normalize(reflect(cameraToVertex,worldNormal));\\nr=vec3(reflectionMatrix*vec4(r,0));\\nfloat lon=atan(r.z,r.x);\\nfloat lat=acos(r.y);\\nvec2 sphereCoords=vec2(lon,lat)*RECIPROCAL_PI2*2.0;\\nfloat s=sphereCoords.x*0.5+0.5;\\nfloat t=sphereCoords.y;\\nreturn vec3(s,t,0);\\n#endif\\n#ifdef REFLECTIONMAP_SPHERICAL\\nvec3 viewDir=normalize(vec3(view*worldPos));\\nvec3 viewNormal=normalize(vec3(view*vec4(worldNormal,0.0)));\\nvec3 r=reflect(viewDir,viewNormal);\\nr=vec3(reflectionMatrix*vec4(r,0));\\nr.z=r.z-1.0;\\nfloat m=2.0*length(r);\\nreturn vec3(r.x/m+0.5,1.0-r.y/m-0.5,0);\\n#endif\\n#ifdef REFLECTIONMAP_PLANAR\\nvec3 viewDir=worldPos.xyz-vEyePosition.xyz;\\nvec3 coords=normalize(reflect(viewDir,worldNormal));\\nreturn vec3(reflectionMatrix*vec4(coords,1));\\n#endif\\n#ifdef REFLECTIONMAP_CUBIC\\nvec3 viewDir=normalize(worldPos.xyz-vEyePosition.xyz);\\n\\nvec3 coords=reflect(viewDir,worldNormal);\\n#ifdef USE_LOCAL_REFLECTIONMAP_CUBIC\\ncoords=parallaxCorrectNormal(worldPos.xyz,coords,vReflectionSize,vReflectionPosition);\\n#endif\\ncoords=vec3(reflectionMatrix*vec4(coords,0));\\n#ifdef INVERTCUBICMAP\\ncoords.y*=-1.0;\\n#endif\\nreturn coords;\\n#endif\\n#ifdef REFLECTIONMAP_PROJECTION\\nreturn vec3(reflectionMatrix*(view*worldPos));\\n#endif\\n#ifdef REFLECTIONMAP_SKYBOX\\nreturn vec3(reflectionMatrix*vec4(vPositionUVW,0));\\n#endif\\n#ifdef REFLECTIONMAP_EXPLICIT\\nreturn vec3(0,0,0);\\n#endif\\n}\";e.Effect.IncludesShadersStore[n]=r;var o={name:n,shader:r};exports.reflectionFunction=o;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/reflectionFunction.ts","name":null,"original":{"line":87,"column":7},"generated":{"line":1,"column":0}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/reflectionFunction.ts","name":null,"original":{"line":87,"column":7},"generated":{"line":1,"column":13}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/reflectionFunction.ts","name":null,"original":{"line":87,"column":7},"generated":{"line":1,"column":20}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/reflectionFunction.ts","name":null,"original":{"line":87,"column":7},"generated":{"line":1,"column":35}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/reflectionFunction.ts","name":null,"original":{"line":87,"column":7},"generated":{"line":1,"column":43}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/reflectionFunction.ts","name":null,"original":{"line":87,"column":7},"generated":{"line":1,"column":56}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/reflectionFunction.ts","name":null,"original":{"line":87,"column":7},"generated":{"line":1,"column":57}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/reflectionFunction.ts","name":null,"original":{"line":87,"column":7},"generated":{"line":1,"column":64}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/reflectionFunction.ts","name":null,"original":{"line":87,"column":7},"generated":{"line":1,"column":68}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/reflectionFunction.ts","name":null,"original":{"line":87,"column":7},"generated":{"line":1,"column":76}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/reflectionFunction.ts","name":null,"original":{"line":87,"column":7},"generated":{"line":1,"column":100}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/reflectionFunction.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":102}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/reflectionFunction.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":106}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/reflectionFunction.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":108}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/reflectionFunction.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":116}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/reflectionFunction.ts","name":null,"original":{"line":3,"column":4},"generated":{"line":1,"column":142}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/reflectionFunction.ts","name":null,"original":{"line":3,"column":11},"generated":{"line":1,"column":144}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/reflectionFunction.ts","name":null,"original":{"line":4,"column":4},"generated":{"line":1,"column":165}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/reflectionFunction.ts","name":null,"original":{"line":4,"column":13},"generated":{"line":1,"column":167}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/reflectionFunction.ts","name":null,"original":{"line":85,"column":0},"generated":{"line":1,"column":2763}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/reflectionFunction.ts","name":null,"original":{"line":85,"column":7},"generated":{"line":1,"column":2765}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/reflectionFunction.ts","name":null,"original":{"line":85,"column":7},"generated":{"line":1,"column":2772}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/reflectionFunction.ts","name":null,"original":{"line":85,"column":28},"generated":{"line":1,"column":2793}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/reflectionFunction.ts","name":null,"original":{"line":85,"column":36},"generated":{"line":1,"column":2796}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/reflectionFunction.ts","name":null,"original":{"line":87,"column":7},"generated":{"line":1,"column":2798}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/reflectionFunction.ts","name":null,"original":{"line":87,"column":11},"generated":{"line":1,"column":2802}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/reflectionFunction.ts","name":null,"original":{"line":87,"column":32},"generated":{"line":1,"column":2804}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/reflectionFunction.ts","name":null,"original":{"line":87,"column":34},"generated":{"line":1,"column":2805}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/reflectionFunction.ts","name":null,"original":{"line":87,"column":38},"generated":{"line":1,"column":2810}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/reflectionFunction.ts","name":null,"original":{"line":87,"column":40},"generated":{"line":1,"column":2812}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/reflectionFunction.ts","name":null,"original":{"line":87,"column":46},"generated":{"line":1,"column":2819}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/reflectionFunction.ts","name":null,"original":{"line":87,"column":7},"generated":{"line":1,"column":2822}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/reflectionFunction.ts","name":null,"original":{"line":87,"column":7},"generated":{"line":1,"column":2830}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/reflectionFunction.ts","name":null,"original":{"line":87,"column":7},"generated":{"line":1,"column":2849}}],"sources":{"../../../../sourceES6/core/Shaders/ShadersInclude/reflectionFunction.ts":"import { Effect } from \"../../Materials/effect\";\n\nlet name = 'reflectionFunction';\nlet shader = `#ifdef USE_LOCAL_REFLECTIONMAP_CUBIC\nvec3 parallaxCorrectNormal( vec3 vertexPos,vec3 origVec,vec3 cubeSize,vec3 cubePos ) {\n\nvec3 invOrigVec=vec3(1.0,1.0,1.0)/origVec;\nvec3 halfSize=cubeSize*0.5;\nvec3 intersecAtMaxPlane=(cubePos+halfSize-vertexPos)*invOrigVec;\nvec3 intersecAtMinPlane=(cubePos-halfSize-vertexPos)*invOrigVec;\n\nvec3 largestIntersec=max(intersecAtMaxPlane,intersecAtMinPlane);\n\nfloat distance=min(min(largestIntersec.x,largestIntersec.y),largestIntersec.z);\n\nvec3 intersectPositionWS=vertexPos+origVec*distance;\n\nreturn intersectPositionWS-cubePos;\n}\n#endif\nvec3 computeReflectionCoords(vec4 worldPos,vec3 worldNormal)\n{\n#if defined(REFLECTIONMAP_EQUIRECTANGULAR_FIXED) || defined(REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED)\nvec3 direction=normalize(vDirectionW);\nfloat lon=atan(direction.z,direction.x);\nfloat lat=acos(direction.y);\nvec2 sphereCoords=vec2(lon,lat)*RECIPROCAL_PI2*2.0;\nfloat s=sphereCoords.x*0.5+0.5;\nfloat t=sphereCoords.y;\n#ifdef REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED\nreturn vec3(1.0-s,t,0);\n#else\nreturn vec3(s,t,0);\n#endif\n#endif\n#ifdef REFLECTIONMAP_EQUIRECTANGULAR\nvec3 cameraToVertex=normalize(worldPos.xyz-vEyePosition.xyz);\nvec3 r=normalize(reflect(cameraToVertex,worldNormal));\nr=vec3(reflectionMatrix*vec4(r,0));\nfloat lon=atan(r.z,r.x);\nfloat lat=acos(r.y);\nvec2 sphereCoords=vec2(lon,lat)*RECIPROCAL_PI2*2.0;\nfloat s=sphereCoords.x*0.5+0.5;\nfloat t=sphereCoords.y;\nreturn vec3(s,t,0);\n#endif\n#ifdef REFLECTIONMAP_SPHERICAL\nvec3 viewDir=normalize(vec3(view*worldPos));\nvec3 viewNormal=normalize(vec3(view*vec4(worldNormal,0.0)));\nvec3 r=reflect(viewDir,viewNormal);\nr=vec3(reflectionMatrix*vec4(r,0));\nr.z=r.z-1.0;\nfloat m=2.0*length(r);\nreturn vec3(r.x/m+0.5,1.0-r.y/m-0.5,0);\n#endif\n#ifdef REFLECTIONMAP_PLANAR\nvec3 viewDir=worldPos.xyz-vEyePosition.xyz;\nvec3 coords=normalize(reflect(viewDir,worldNormal));\nreturn vec3(reflectionMatrix*vec4(coords,1));\n#endif\n#ifdef REFLECTIONMAP_CUBIC\nvec3 viewDir=normalize(worldPos.xyz-vEyePosition.xyz);\n\nvec3 coords=reflect(viewDir,worldNormal);\n#ifdef USE_LOCAL_REFLECTIONMAP_CUBIC\ncoords=parallaxCorrectNormal(worldPos.xyz,coords,vReflectionSize,vReflectionPosition);\n#endif\ncoords=vec3(reflectionMatrix*vec4(coords,0));\n#ifdef INVERTCUBICMAP\ncoords.y*=-1.0;\n#endif\nreturn coords;\n#endif\n#ifdef REFLECTIONMAP_PROJECTION\nreturn vec3(reflectionMatrix*(view*worldPos));\n#endif\n#ifdef REFLECTIONMAP_SKYBOX\nreturn vec3(reflectionMatrix*vec4(vPositionUVW,0));\n#endif\n#ifdef REFLECTIONMAP_EXPLICIT\nreturn vec3(0,0,0);\n#endif\n}`;\n\nEffect.IncludesShadersStore[name] = shader;\n/** @hidden */\nexport var reflectionFunction = { name, shader };\n"},"lineCount":null}},"error":null,"hash":"cf5994f1b0be6e9c9495d5bfa93d2c88","cacheData":{"env":{}}}