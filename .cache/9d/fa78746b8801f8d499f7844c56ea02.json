{"id":"RX95","dependencies":[{"name":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/bumpFragmentFunctions.js.map","includedInParent":true,"mtime":1556745103000},{"name":"/Users/hujy/GT/Spring20/3DU/3DPainter/package.json","includedInParent":true,"mtime":1588539929318},{"name":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/package.json","includedInParent":true,"mtime":1588537596306},{"name":"../../Materials/effect","loc":{"line":1,"column":23},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/bumpFragmentFunctions.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Materials/effect.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.bumpFragmentFunctions=void 0;var e=require(\"../../Materials/effect\"),n=\"bumpFragmentFunctions\",a=\"#if defined(BUMP) || defined(CLEARCOAT_BUMP) || defined(ANISOTROPIC)\\n#if defined(TANGENT) && defined(NORMAL)\\nvarying mat3 vTBN;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\nuniform mat4 normalMatrix;\\n#endif\\nvec3 perturbNormal(mat3 cotangentFrame,vec2 uv,sampler2D textureSampler,float scale)\\n{\\nvec3 map=texture2D(textureSampler,uv).xyz;\\nmap=map*2.0-1.0;\\n#ifdef NORMALXYSCALE\\nmap=normalize(map*vec3(scale,scale,1.0));\\n#endif\\nreturn normalize(cotangentFrame*map);\\n}\\n\\nmat3 cotangent_frame(vec3 normal,vec3 p,vec2 uv,vec2 tangentSpaceParams)\\n{\\n\\nuv=gl_FrontFacing ? uv : -uv;\\n\\nvec3 dp1=dFdx(p);\\nvec3 dp2=dFdy(p);\\nvec2 duv1=dFdx(uv);\\nvec2 duv2=dFdy(uv);\\n\\nvec3 dp2perp=cross(dp2,normal);\\nvec3 dp1perp=cross(normal,dp1);\\nvec3 tangent=dp2perp*duv1.x+dp1perp*duv2.x;\\nvec3 bitangent=dp2perp*duv1.y+dp1perp*duv2.y;\\n\\ntangent*=tangentSpaceParams.x;\\nbitangent*=tangentSpaceParams.y;\\n\\nfloat invmax=inversesqrt(max(dot(tangent,tangent),dot(bitangent,bitangent)));\\nreturn mat3(tangent*invmax,bitangent*invmax,normal);\\n}\\n#endif\\n#ifdef BUMP\\n#if BUMPDIRECTUV == 1\\n#define vBumpUV vMainUV1\\n#elif BUMPDIRECTUV == 2\\n#define vBumpUV vMainUV2\\n#else\\nvarying vec2 vBumpUV;\\n#endif\\nuniform sampler2D bumpSampler;\\nvec3 perturbNormal(mat3 cotangentFrame,vec2 uv)\\n{\\nreturn perturbNormal(cotangentFrame,uv,bumpSampler,vBumpInfos.y);\\n}\\n\\nmat3 cotangent_frame(vec3 normal,vec3 p,vec2 uv)\\n{\\nreturn cotangent_frame(normal,p,uv,vTangentSpaceParams);\\n}\\n#endif\\n#if defined(BUMP) && defined(PARALLAX)\\nconst float minSamples=4.;\\nconst float maxSamples=15.;\\nconst int iMaxSamples=15;\\n\\nvec2 parallaxOcclusion(vec3 vViewDirCoT,vec3 vNormalCoT,vec2 texCoord,float parallaxScale) {\\nfloat parallaxLimit=length(vViewDirCoT.xy)/vViewDirCoT.z;\\nparallaxLimit*=parallaxScale;\\nvec2 vOffsetDir=normalize(vViewDirCoT.xy);\\nvec2 vMaxOffset=vOffsetDir*parallaxLimit;\\nfloat numSamples=maxSamples+(dot(vViewDirCoT,vNormalCoT)*(minSamples-maxSamples));\\nfloat stepSize=1.0/numSamples;\\n\\nfloat currRayHeight=1.0;\\nvec2 vCurrOffset=vec2(0,0);\\nvec2 vLastOffset=vec2(0,0);\\nfloat lastSampledHeight=1.0;\\nfloat currSampledHeight=1.0;\\nfor (int i=0; i<iMaxSamples; i++)\\n{\\ncurrSampledHeight=texture2D(bumpSampler,vBumpUV+vCurrOffset).w;\\n\\nif (currSampledHeight>currRayHeight)\\n{\\nfloat delta1=currSampledHeight-currRayHeight;\\nfloat delta2=(currRayHeight+stepSize)-lastSampledHeight;\\nfloat ratio=delta1/(delta1+delta2);\\nvCurrOffset=(ratio)* vLastOffset+(1.0-ratio)*vCurrOffset;\\n\\nbreak;\\n}\\nelse\\n{\\ncurrRayHeight-=stepSize;\\nvLastOffset=vCurrOffset;\\nvCurrOffset+=stepSize*vMaxOffset;\\nlastSampledHeight=currSampledHeight;\\n}\\n}\\nreturn vCurrOffset;\\n}\\nvec2 parallaxOffset(vec3 viewDir,float heightScale)\\n{\\n\\nfloat height=texture2D(bumpSampler,vBumpUV).w;\\nvec2 texCoordOffset=heightScale*viewDir.xy*height;\\nreturn -texCoordOffset;\\n}\\n#endif\";e.Effect.IncludesShadersStore[n]=a;var t={name:n,shader:a};exports.bumpFragmentFunctions=t;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":114,"column":7},"generated":{"line":1,"column":0}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":114,"column":7},"generated":{"line":1,"column":13}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":114,"column":7},"generated":{"line":1,"column":20}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":114,"column":7},"generated":{"line":1,"column":35}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":114,"column":7},"generated":{"line":1,"column":43}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":114,"column":7},"generated":{"line":1,"column":56}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":114,"column":7},"generated":{"line":1,"column":57}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":114,"column":7},"generated":{"line":1,"column":64}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":114,"column":7},"generated":{"line":1,"column":68}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":114,"column":7},"generated":{"line":1,"column":76}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":114,"column":7},"generated":{"line":1,"column":103}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":105}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":109}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":111}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":119}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":3,"column":4},"generated":{"line":1,"column":145}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":3,"column":11},"generated":{"line":1,"column":147}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":4,"column":4},"generated":{"line":1,"column":171}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":4,"column":13},"generated":{"line":1,"column":173}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":112,"column":0},"generated":{"line":1,"column":3019}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":112,"column":7},"generated":{"line":1,"column":3021}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":112,"column":7},"generated":{"line":1,"column":3028}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":112,"column":28},"generated":{"line":1,"column":3049}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":112,"column":36},"generated":{"line":1,"column":3052}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":114,"column":7},"generated":{"line":1,"column":3054}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":114,"column":11},"generated":{"line":1,"column":3058}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":114,"column":35},"generated":{"line":1,"column":3060}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":114,"column":37},"generated":{"line":1,"column":3061}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":114,"column":41},"generated":{"line":1,"column":3066}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":114,"column":43},"generated":{"line":1,"column":3068}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":114,"column":49},"generated":{"line":1,"column":3075}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":114,"column":7},"generated":{"line":1,"column":3078}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":114,"column":7},"generated":{"line":1,"column":3086}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":114,"column":7},"generated":{"line":1,"column":3108}}],"sources":{"../../../../sourceES6/core/Shaders/ShadersInclude/bumpFragmentFunctions.ts":"import { Effect } from \"../../Materials/effect\";\n\nlet name = 'bumpFragmentFunctions';\nlet shader = `#if defined(BUMP) || defined(CLEARCOAT_BUMP) || defined(ANISOTROPIC)\n#if defined(TANGENT) && defined(NORMAL)\nvarying mat3 vTBN;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\nuniform mat4 normalMatrix;\n#endif\nvec3 perturbNormal(mat3 cotangentFrame,vec2 uv,sampler2D textureSampler,float scale)\n{\nvec3 map=texture2D(textureSampler,uv).xyz;\nmap=map*2.0-1.0;\n#ifdef NORMALXYSCALE\nmap=normalize(map*vec3(scale,scale,1.0));\n#endif\nreturn normalize(cotangentFrame*map);\n}\n\nmat3 cotangent_frame(vec3 normal,vec3 p,vec2 uv,vec2 tangentSpaceParams)\n{\n\nuv=gl_FrontFacing ? uv : -uv;\n\nvec3 dp1=dFdx(p);\nvec3 dp2=dFdy(p);\nvec2 duv1=dFdx(uv);\nvec2 duv2=dFdy(uv);\n\nvec3 dp2perp=cross(dp2,normal);\nvec3 dp1perp=cross(normal,dp1);\nvec3 tangent=dp2perp*duv1.x+dp1perp*duv2.x;\nvec3 bitangent=dp2perp*duv1.y+dp1perp*duv2.y;\n\ntangent*=tangentSpaceParams.x;\nbitangent*=tangentSpaceParams.y;\n\nfloat invmax=inversesqrt(max(dot(tangent,tangent),dot(bitangent,bitangent)));\nreturn mat3(tangent*invmax,bitangent*invmax,normal);\n}\n#endif\n#ifdef BUMP\n#if BUMPDIRECTUV == 1\n#define vBumpUV vMainUV1\n#elif BUMPDIRECTUV == 2\n#define vBumpUV vMainUV2\n#else\nvarying vec2 vBumpUV;\n#endif\nuniform sampler2D bumpSampler;\nvec3 perturbNormal(mat3 cotangentFrame,vec2 uv)\n{\nreturn perturbNormal(cotangentFrame,uv,bumpSampler,vBumpInfos.y);\n}\n\nmat3 cotangent_frame(vec3 normal,vec3 p,vec2 uv)\n{\nreturn cotangent_frame(normal,p,uv,vTangentSpaceParams);\n}\n#endif\n#if defined(BUMP) && defined(PARALLAX)\nconst float minSamples=4.;\nconst float maxSamples=15.;\nconst int iMaxSamples=15;\n\nvec2 parallaxOcclusion(vec3 vViewDirCoT,vec3 vNormalCoT,vec2 texCoord,float parallaxScale) {\nfloat parallaxLimit=length(vViewDirCoT.xy)/vViewDirCoT.z;\nparallaxLimit*=parallaxScale;\nvec2 vOffsetDir=normalize(vViewDirCoT.xy);\nvec2 vMaxOffset=vOffsetDir*parallaxLimit;\nfloat numSamples=maxSamples+(dot(vViewDirCoT,vNormalCoT)*(minSamples-maxSamples));\nfloat stepSize=1.0/numSamples;\n\nfloat currRayHeight=1.0;\nvec2 vCurrOffset=vec2(0,0);\nvec2 vLastOffset=vec2(0,0);\nfloat lastSampledHeight=1.0;\nfloat currSampledHeight=1.0;\nfor (int i=0; i<iMaxSamples; i++)\n{\ncurrSampledHeight=texture2D(bumpSampler,vBumpUV+vCurrOffset).w;\n\nif (currSampledHeight>currRayHeight)\n{\nfloat delta1=currSampledHeight-currRayHeight;\nfloat delta2=(currRayHeight+stepSize)-lastSampledHeight;\nfloat ratio=delta1/(delta1+delta2);\nvCurrOffset=(ratio)* vLastOffset+(1.0-ratio)*vCurrOffset;\n\nbreak;\n}\nelse\n{\ncurrRayHeight-=stepSize;\nvLastOffset=vCurrOffset;\nvCurrOffset+=stepSize*vMaxOffset;\nlastSampledHeight=currSampledHeight;\n}\n}\nreturn vCurrOffset;\n}\nvec2 parallaxOffset(vec3 viewDir,float heightScale)\n{\n\nfloat height=texture2D(bumpSampler,vBumpUV).w;\nvec2 texCoordOffset=heightScale*viewDir.xy*height;\nreturn -texCoordOffset;\n}\n#endif`;\n\nEffect.IncludesShadersStore[name] = shader;\n/** @hidden */\nexport var bumpFragmentFunctions = { name, shader };\n"},"lineCount":null}},"error":null,"hash":"ec1ed1aad264b190b6d5fef6090bfc36","cacheData":{"env":{}}}