{"id":"OMsj","dependencies":[{"name":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/gpuRenderParticles.vertex.js.map","includedInParent":true,"mtime":1556745104000},{"name":"/Users/hujy/GT/Spring20/3DU/3DPainter/package.json","includedInParent":true,"mtime":1588539929318},{"name":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/package.json","includedInParent":true,"mtime":1588537596306},{"name":"../Materials/effect","loc":{"line":1,"column":23},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/gpuRenderParticles.vertex.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Materials/effect.js"},{"name":"./ShadersInclude/clipPlaneVertexDeclaration2","loc":{"line":2,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/gpuRenderParticles.vertex.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/clipPlaneVertexDeclaration2.js"},{"name":"./ShadersInclude/clipPlaneVertex","loc":{"line":3,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/gpuRenderParticles.vertex.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/clipPlaneVertex.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.gpuRenderParticlesVertexShader=void 0;var e=require(\"../Materials/effect\");require(\"./ShadersInclude/clipPlaneVertexDeclaration2\"),require(\"./ShadersInclude/clipPlaneVertex\");var n=\"gpuRenderParticlesVertexShader\",o=\"#version 300 es\\nuniform mat4 view;\\nuniform mat4 projection;\\nuniform vec2 translationPivot;\\nuniform vec3 worldOffset;\\n\\nin vec3 position;\\nin float age;\\nin float life;\\nin vec3 size;\\n#ifndef BILLBOARD\\nin vec3 initialDirection;\\n#endif\\n#ifdef BILLBOARDSTRETCHED\\nin vec3 direction;\\n#endif\\nin float angle;\\n#ifdef ANIMATESHEET\\nin float cellIndex;\\n#endif\\nin vec2 offset;\\nin vec2 uv;\\nout vec2 vUV;\\nout vec4 vColor;\\n#if defined(CLIPPLANE) || defined(CLIPPLANE2) || defined(CLIPPLANE3) || defined(CLIPPLANE4)\\nuniform mat4 invView;\\n#endif\\n#include<clipPlaneVertexDeclaration2>\\n#ifdef COLORGRADIENTS\\nuniform sampler2D colorGradientSampler;\\n#else\\nuniform vec4 colorDead;\\nin vec4 color;\\n#endif\\n#ifdef ANIMATESHEET\\nuniform vec3 sheetInfos;\\n#endif\\n#ifdef BILLBOARD\\nuniform vec3 eyePosition;\\n#endif\\nvec3 rotate(vec3 yaxis,vec3 rotatedCorner) {\\nvec3 xaxis=normalize(cross(vec3(0.,1.0,0.),yaxis));\\nvec3 zaxis=normalize(cross(yaxis,xaxis));\\nvec3 row0=vec3(xaxis.x,xaxis.y,xaxis.z);\\nvec3 row1=vec3(yaxis.x,yaxis.y,yaxis.z);\\nvec3 row2=vec3(zaxis.x,zaxis.y,zaxis.z);\\nmat3 rotMatrix=mat3(row0,row1,row2);\\nvec3 alignedCorner=rotMatrix*rotatedCorner;\\nreturn (position+worldOffset)+alignedCorner;\\n}\\n#ifdef BILLBOARDSTRETCHED\\nvec3 rotateAlign(vec3 toCamera,vec3 rotatedCorner) {\\nvec3 normalizedToCamera=normalize(toCamera);\\nvec3 normalizedCrossDirToCamera=normalize(cross(normalize(direction),normalizedToCamera));\\nvec3 crossProduct=normalize(cross(normalizedToCamera,normalizedCrossDirToCamera));\\nvec3 row0=vec3(normalizedCrossDirToCamera.x,normalizedCrossDirToCamera.y,normalizedCrossDirToCamera.z);\\nvec3 row1=vec3(crossProduct.x,crossProduct.y,crossProduct.z);\\nvec3 row2=vec3(normalizedToCamera.x,normalizedToCamera.y,normalizedToCamera.z);\\nmat3 rotMatrix=mat3(row0,row1,row2);\\nvec3 alignedCorner=rotMatrix*rotatedCorner;\\nreturn (position+worldOffset)+alignedCorner;\\n}\\n#endif\\nvoid main() {\\n#ifdef ANIMATESHEET\\nfloat rowOffset=floor(cellIndex/sheetInfos.z);\\nfloat columnOffset=cellIndex-rowOffset*sheetInfos.z;\\nvec2 uvScale=sheetInfos.xy;\\nvec2 uvOffset=vec2(uv.x ,1.0-uv.y);\\nvUV=(uvOffset+vec2(columnOffset,rowOffset))*uvScale;\\n#else\\nvUV=uv;\\n#endif\\nfloat ratio=age/life;\\n#ifdef COLORGRADIENTS\\nvColor=texture(colorGradientSampler,vec2(ratio,0));\\n#else\\nvColor=color*vec4(1.0-ratio)+colorDead*vec4(ratio);\\n#endif\\nvec2 cornerPos=(offset-translationPivot)*size.yz*size.x+translationPivot;\\n#ifdef BILLBOARD\\nvec4 rotatedCorner;\\nrotatedCorner.w=0.;\\n#ifdef BILLBOARDY\\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\\nrotatedCorner.z=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\\nrotatedCorner.y=0.;\\nvec3 yaxis=(position+worldOffset)-eyePosition;\\nyaxis.y=0.;\\nvec3 worldPos=rotate(normalize(yaxis),rotatedCorner.xyz);\\nvec4 viewPosition=(view*vec4(worldPos,1.0));\\n#elif defined(BILLBOARDSTRETCHED)\\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\\nrotatedCorner.y=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\\nrotatedCorner.z=0.;\\nvec3 toCamera=(position+worldOffset)-eyePosition;\\nvec3 worldPos=rotateAlign(toCamera,rotatedCorner.xyz);\\nvec4 viewPosition=(view*vec4(worldPos,1.0));\\n#else\\n\\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\\nrotatedCorner.y=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\\nrotatedCorner.z=0.;\\n\\nvec4 viewPosition=view*vec4((position+worldOffset),1.0)+rotatedCorner;\\n#endif\\n#else\\n\\nvec3 rotatedCorner;\\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\\nrotatedCorner.y=0.;\\nrotatedCorner.z=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\\nvec3 yaxis=normalize(initialDirection);\\nvec3 worldPos=rotate(yaxis,rotatedCorner);\\n\\nvec4 viewPosition=view*vec4(worldPos,1.0);\\n#endif\\ngl_Position=projection*viewPosition;\\n\\n#if defined(CLIPPLANE) || defined(CLIPPLANE2) || defined(CLIPPLANE3) || defined(CLIPPLANE4)\\nvec4 worldPos=invView*viewPosition;\\n#endif\\n#include<clipPlaneVertex>\\n}\";e.Effect.ShadersStore[n]=o;var r={name:n,shader:o};exports.gpuRenderParticlesVertexShader=r;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":133,"column":7},"generated":{"line":1,"column":0}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":133,"column":7},"generated":{"line":1,"column":13}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":133,"column":7},"generated":{"line":1,"column":20}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":133,"column":7},"generated":{"line":1,"column":35}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":133,"column":7},"generated":{"line":1,"column":43}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":133,"column":7},"generated":{"line":1,"column":56}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":133,"column":7},"generated":{"line":1,"column":57}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":133,"column":7},"generated":{"line":1,"column":64}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":133,"column":7},"generated":{"line":1,"column":68}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":133,"column":7},"generated":{"line":1,"column":76}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":133,"column":7},"generated":{"line":1,"column":112}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":114}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":118}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":120}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":128}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":151}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":159}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":207}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":215}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":1,"column":251}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":5,"column":4},"generated":{"line":1,"column":255}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":5,"column":11},"generated":{"line":1,"column":257}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":6,"column":4},"generated":{"line":1,"column":290}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":6,"column":13},"generated":{"line":1,"column":292}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":131,"column":0},"generated":{"line":1,"column":4225}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":131,"column":7},"generated":{"line":1,"column":4227}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":131,"column":7},"generated":{"line":1,"column":4234}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":131,"column":20},"generated":{"line":1,"column":4247}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":131,"column":28},"generated":{"line":1,"column":4250}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":133,"column":7},"generated":{"line":1,"column":4252}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":133,"column":11},"generated":{"line":1,"column":4256}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":133,"column":44},"generated":{"line":1,"column":4258}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":133,"column":46},"generated":{"line":1,"column":4259}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":133,"column":50},"generated":{"line":1,"column":4264}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":133,"column":52},"generated":{"line":1,"column":4266}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":133,"column":58},"generated":{"line":1,"column":4273}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":133,"column":7},"generated":{"line":1,"column":4276}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":133,"column":7},"generated":{"line":1,"column":4284}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":133,"column":7},"generated":{"line":1,"column":4315}}],"sources":{"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts":"import { Effect } from \"../Materials/effect\";\nimport \"./ShadersInclude/clipPlaneVertexDeclaration2\";\nimport \"./ShadersInclude/clipPlaneVertex\";\n\nlet name = 'gpuRenderParticlesVertexShader';\nlet shader = `#version 300 es\nuniform mat4 view;\nuniform mat4 projection;\nuniform vec2 translationPivot;\nuniform vec3 worldOffset;\n\nin vec3 position;\nin float age;\nin float life;\nin vec3 size;\n#ifndef BILLBOARD\nin vec3 initialDirection;\n#endif\n#ifdef BILLBOARDSTRETCHED\nin vec3 direction;\n#endif\nin float angle;\n#ifdef ANIMATESHEET\nin float cellIndex;\n#endif\nin vec2 offset;\nin vec2 uv;\nout vec2 vUV;\nout vec4 vColor;\n#if defined(CLIPPLANE) || defined(CLIPPLANE2) || defined(CLIPPLANE3) || defined(CLIPPLANE4)\nuniform mat4 invView;\n#endif\n#include<clipPlaneVertexDeclaration2>\n#ifdef COLORGRADIENTS\nuniform sampler2D colorGradientSampler;\n#else\nuniform vec4 colorDead;\nin vec4 color;\n#endif\n#ifdef ANIMATESHEET\nuniform vec3 sheetInfos;\n#endif\n#ifdef BILLBOARD\nuniform vec3 eyePosition;\n#endif\nvec3 rotate(vec3 yaxis,vec3 rotatedCorner) {\nvec3 xaxis=normalize(cross(vec3(0.,1.0,0.),yaxis));\nvec3 zaxis=normalize(cross(yaxis,xaxis));\nvec3 row0=vec3(xaxis.x,xaxis.y,xaxis.z);\nvec3 row1=vec3(yaxis.x,yaxis.y,yaxis.z);\nvec3 row2=vec3(zaxis.x,zaxis.y,zaxis.z);\nmat3 rotMatrix=mat3(row0,row1,row2);\nvec3 alignedCorner=rotMatrix*rotatedCorner;\nreturn (position+worldOffset)+alignedCorner;\n}\n#ifdef BILLBOARDSTRETCHED\nvec3 rotateAlign(vec3 toCamera,vec3 rotatedCorner) {\nvec3 normalizedToCamera=normalize(toCamera);\nvec3 normalizedCrossDirToCamera=normalize(cross(normalize(direction),normalizedToCamera));\nvec3 crossProduct=normalize(cross(normalizedToCamera,normalizedCrossDirToCamera));\nvec3 row0=vec3(normalizedCrossDirToCamera.x,normalizedCrossDirToCamera.y,normalizedCrossDirToCamera.z);\nvec3 row1=vec3(crossProduct.x,crossProduct.y,crossProduct.z);\nvec3 row2=vec3(normalizedToCamera.x,normalizedToCamera.y,normalizedToCamera.z);\nmat3 rotMatrix=mat3(row0,row1,row2);\nvec3 alignedCorner=rotMatrix*rotatedCorner;\nreturn (position+worldOffset)+alignedCorner;\n}\n#endif\nvoid main() {\n#ifdef ANIMATESHEET\nfloat rowOffset=floor(cellIndex/sheetInfos.z);\nfloat columnOffset=cellIndex-rowOffset*sheetInfos.z;\nvec2 uvScale=sheetInfos.xy;\nvec2 uvOffset=vec2(uv.x ,1.0-uv.y);\nvUV=(uvOffset+vec2(columnOffset,rowOffset))*uvScale;\n#else\nvUV=uv;\n#endif\nfloat ratio=age/life;\n#ifdef COLORGRADIENTS\nvColor=texture(colorGradientSampler,vec2(ratio,0));\n#else\nvColor=color*vec4(1.0-ratio)+colorDead*vec4(ratio);\n#endif\nvec2 cornerPos=(offset-translationPivot)*size.yz*size.x+translationPivot;\n#ifdef BILLBOARD\nvec4 rotatedCorner;\nrotatedCorner.w=0.;\n#ifdef BILLBOARDY\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\nrotatedCorner.z=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\nrotatedCorner.y=0.;\nvec3 yaxis=(position+worldOffset)-eyePosition;\nyaxis.y=0.;\nvec3 worldPos=rotate(normalize(yaxis),rotatedCorner.xyz);\nvec4 viewPosition=(view*vec4(worldPos,1.0));\n#elif defined(BILLBOARDSTRETCHED)\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\nrotatedCorner.y=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\nrotatedCorner.z=0.;\nvec3 toCamera=(position+worldOffset)-eyePosition;\nvec3 worldPos=rotateAlign(toCamera,rotatedCorner.xyz);\nvec4 viewPosition=(view*vec4(worldPos,1.0));\n#else\n\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\nrotatedCorner.y=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\nrotatedCorner.z=0.;\n\nvec4 viewPosition=view*vec4((position+worldOffset),1.0)+rotatedCorner;\n#endif\n#else\n\nvec3 rotatedCorner;\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\nrotatedCorner.y=0.;\nrotatedCorner.z=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\nvec3 yaxis=normalize(initialDirection);\nvec3 worldPos=rotate(yaxis,rotatedCorner);\n\nvec4 viewPosition=view*vec4(worldPos,1.0);\n#endif\ngl_Position=projection*viewPosition;\n\n#if defined(CLIPPLANE) || defined(CLIPPLANE2) || defined(CLIPPLANE3) || defined(CLIPPLANE4)\nvec4 worldPos=invView*viewPosition;\n#endif\n#include<clipPlaneVertex>\n}`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var gpuRenderParticlesVertexShader = { name, shader };\n"},"lineCount":null}},"error":null,"hash":"9e51baa73e870d6b2ca3e30041c2754e","cacheData":{"env":{}}}