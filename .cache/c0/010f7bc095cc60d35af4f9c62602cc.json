{"id":"Ap7l","dependencies":[{"name":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/pbr.fragment.js.map","includedInParent":true,"mtime":1556745104000},{"name":"/Users/hujy/GT/Spring20/3DU/3DPainter/package.json","includedInParent":true,"mtime":1588539929318},{"name":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/package.json","includedInParent":true,"mtime":1588537596306},{"name":"../Materials/effect","loc":{"line":1,"column":23},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/pbr.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Materials/effect.js"},{"name":"./ShadersInclude/pbrFragmentDeclaration","loc":{"line":2,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/pbr.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/pbrFragmentDeclaration.js"},{"name":"./ShadersInclude/pbrUboDeclaration","loc":{"line":3,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/pbr.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/pbrUboDeclaration.js"},{"name":"./ShadersInclude/pbrFragmentExtraDeclaration","loc":{"line":4,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/pbr.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/pbrFragmentExtraDeclaration.js"},{"name":"./ShadersInclude/lightFragmentDeclaration","loc":{"line":5,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/pbr.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/lightFragmentDeclaration.js"},{"name":"./ShadersInclude/lightUboDeclaration","loc":{"line":6,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/pbr.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/lightUboDeclaration.js"},{"name":"./ShadersInclude/pbrFragmentSamplersDeclaration","loc":{"line":7,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/pbr.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/pbrFragmentSamplersDeclaration.js"},{"name":"./ShadersInclude/imageProcessingDeclaration","loc":{"line":8,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/pbr.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/imageProcessingDeclaration.js"},{"name":"./ShadersInclude/clipPlaneFragmentDeclaration","loc":{"line":9,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/pbr.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/clipPlaneFragmentDeclaration.js"},{"name":"./ShadersInclude/logDepthDeclaration","loc":{"line":10,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/pbr.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/logDepthDeclaration.js"},{"name":"./ShadersInclude/fogFragmentDeclaration","loc":{"line":11,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/pbr.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/fogFragmentDeclaration.js"},{"name":"./ShadersInclude/helperFunctions","loc":{"line":12,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/pbr.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/helperFunctions.js"},{"name":"./ShadersInclude/pbrHelperFunctions","loc":{"line":13,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/pbr.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/pbrHelperFunctions.js"},{"name":"./ShadersInclude/imageProcessingFunctions","loc":{"line":14,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/pbr.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/imageProcessingFunctions.js"},{"name":"./ShadersInclude/shadowsFragmentFunctions","loc":{"line":15,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/pbr.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/shadowsFragmentFunctions.js"},{"name":"./ShadersInclude/harmonicsFunctions","loc":{"line":16,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/pbr.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/harmonicsFunctions.js"},{"name":"./ShadersInclude/pbrDirectLightingSetupFunctions","loc":{"line":17,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/pbr.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/pbrDirectLightingSetupFunctions.js"},{"name":"./ShadersInclude/pbrDirectLightingFalloffFunctions","loc":{"line":18,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/pbr.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/pbrDirectLightingFalloffFunctions.js"},{"name":"./ShadersInclude/pbrBRDFFunctions","loc":{"line":19,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/pbr.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/pbrBRDFFunctions.js"},{"name":"./ShadersInclude/pbrDirectLightingFunctions","loc":{"line":20,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/pbr.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/pbrDirectLightingFunctions.js"},{"name":"./ShadersInclude/pbrIBLFunctions","loc":{"line":21,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/pbr.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/pbrIBLFunctions.js"},{"name":"./ShadersInclude/bumpFragmentFunctions","loc":{"line":22,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/pbr.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/bumpFragmentFunctions.js"},{"name":"./ShadersInclude/reflectionFunction","loc":{"line":23,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/pbr.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/reflectionFunction.js"},{"name":"./ShadersInclude/clipPlaneFragment","loc":{"line":24,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/pbr.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/clipPlaneFragment.js"},{"name":"./ShadersInclude/bumpFragment","loc":{"line":25,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/pbr.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/bumpFragment.js"},{"name":"./ShadersInclude/depthPrePass","loc":{"line":26,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/pbr.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/depthPrePass.js"},{"name":"./ShadersInclude/lightFragment","loc":{"line":27,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/pbr.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/lightFragment.js"},{"name":"./ShadersInclude/logDepthFragment","loc":{"line":28,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/pbr.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/logDepthFragment.js"},{"name":"./ShadersInclude/fogFragment","loc":{"line":29,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/pbr.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/fogFragment.js"},{"name":"./ShadersInclude/pbrDebug","loc":{"line":30,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/pbr.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/pbrDebug.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.pbrPixelShader=void 0;var e=require(\"../Materials/effect\");require(\"./ShadersInclude/pbrFragmentDeclaration\"),require(\"./ShadersInclude/pbrUboDeclaration\"),require(\"./ShadersInclude/pbrFragmentExtraDeclaration\"),require(\"./ShadersInclude/lightFragmentDeclaration\"),require(\"./ShadersInclude/lightUboDeclaration\"),require(\"./ShadersInclude/pbrFragmentSamplersDeclaration\"),require(\"./ShadersInclude/imageProcessingDeclaration\"),require(\"./ShadersInclude/clipPlaneFragmentDeclaration\"),require(\"./ShadersInclude/logDepthDeclaration\"),require(\"./ShadersInclude/fogFragmentDeclaration\"),require(\"./ShadersInclude/helperFunctions\"),require(\"./ShadersInclude/pbrHelperFunctions\"),require(\"./ShadersInclude/imageProcessingFunctions\"),require(\"./ShadersInclude/shadowsFragmentFunctions\"),require(\"./ShadersInclude/harmonicsFunctions\"),require(\"./ShadersInclude/pbrDirectLightingSetupFunctions\"),require(\"./ShadersInclude/pbrDirectLightingFalloffFunctions\"),require(\"./ShadersInclude/pbrBRDFFunctions\"),require(\"./ShadersInclude/pbrDirectLightingFunctions\"),require(\"./ShadersInclude/pbrIBLFunctions\"),require(\"./ShadersInclude/bumpFragmentFunctions\"),require(\"./ShadersInclude/reflectionFunction\"),require(\"./ShadersInclude/clipPlaneFragment\"),require(\"./ShadersInclude/bumpFragment\"),require(\"./ShadersInclude/depthPrePass\"),require(\"./ShadersInclude/lightFragment\"),require(\"./ShadersInclude/logDepthFragment\"),require(\"./ShadersInclude/fogFragment\"),require(\"./ShadersInclude/pbrDebug\");var n=\"pbrPixelShader\",a=\"#if defined(BUMP) || !defined(NORMAL) || defined(FORCENORMALFORWARD) || defined(SPECULARAA) || defined(CLEARCOAT_BUMP) || defined(ANISOTROPIC)\\n#extension GL_OES_standard_derivatives : enable\\n#endif\\n#ifdef LODBASEDMICROSFURACE\\n#extension GL_EXT_shader_texture_lod : enable\\n#endif\\n#define CUSTOM_FRAGMENT_BEGIN\\n#ifdef LOGARITHMICDEPTH\\n#extension GL_EXT_frag_depth : enable\\n#endif\\nprecision highp float;\\n\\n#ifndef FROMLINEARSPACE\\n#define FROMLINEARSPACE;\\n#endif\\n\\n#include<__decl__pbrFragment>\\n#include<pbrFragmentExtraDeclaration>\\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\\n#include<pbrFragmentSamplersDeclaration>\\n#include<imageProcessingDeclaration>\\n#include<clipPlaneFragmentDeclaration>\\n#include<logDepthDeclaration>\\n#include<fogFragmentDeclaration>\\n\\n#include<helperFunctions>\\n#include<pbrHelperFunctions>\\n#include<imageProcessingFunctions>\\n#include<shadowsFragmentFunctions>\\n#include<harmonicsFunctions>\\n#include<pbrDirectLightingSetupFunctions>\\n#include<pbrDirectLightingFalloffFunctions>\\n#include<pbrBRDFFunctions>\\n#include<pbrDirectLightingFunctions>\\n#include<pbrIBLFunctions>\\n#include<bumpFragmentFunctions>\\n#ifdef REFLECTION\\n#include<reflectionFunction>\\n#endif\\n#define CUSTOM_FRAGMENT_DEFINITIONS\\n\\nvoid main(void) {\\n#define CUSTOM_FRAGMENT_MAIN_BEGIN\\n#include<clipPlaneFragment>\\n\\nvec3 viewDirectionW=normalize(vEyePosition.xyz-vPositionW);\\n#ifdef NORMAL\\nvec3 normalW=normalize(vNormalW);\\n#else\\nvec3 normalW=normalize(cross(dFdx(vPositionW),dFdy(vPositionW)))*vEyePosition.w;\\n#endif\\n#ifdef CLEARCOAT\\n\\nvec3 clearCoatNormalW=normalW;\\n#endif\\n#include<bumpFragment>\\n#if defined(FORCENORMALFORWARD) && defined(NORMAL)\\nvec3 faceNormal=normalize(cross(dFdx(vPositionW),dFdy(vPositionW)))*vEyePosition.w;\\n#if defined(TWOSIDEDLIGHTING)\\nfaceNormal=gl_FrontFacing ? faceNormal : -faceNormal;\\n#endif\\nnormalW*=sign(dot(normalW,faceNormal));\\n#endif\\n#if defined(TWOSIDEDLIGHTING) && defined(NORMAL)\\nnormalW=gl_FrontFacing ? normalW : -normalW;\\n#endif\\n\\n\\nvec3 surfaceAlbedo=vAlbedoColor.rgb;\\n\\nfloat alpha=vAlbedoColor.a;\\n#ifdef ALBEDO\\nvec4 albedoTexture=texture2D(albedoSampler,vAlbedoUV+uvOffset);\\n#if defined(ALPHAFROMALBEDO) || defined(ALPHATEST)\\nalpha*=albedoTexture.a;\\n#endif\\nsurfaceAlbedo*=toLinearSpace(albedoTexture.rgb);\\nsurfaceAlbedo*=vAlbedoInfos.y;\\n#endif\\n#ifdef VERTEXCOLOR\\nsurfaceAlbedo*=vColor.rgb;\\n#endif\\n#define CUSTOM_FRAGMENT_UPDATE_ALBEDO\\n\\n#ifdef OPACITY\\nvec4 opacityMap=texture2D(opacitySampler,vOpacityUV+uvOffset);\\n#ifdef OPACITYRGB\\nalpha=getLuminance(opacityMap.rgb);\\n#else\\nalpha*=opacityMap.a;\\n#endif\\nalpha*=vOpacityInfos.y;\\n#endif\\n#ifdef VERTEXALPHA\\nalpha*=vColor.a;\\n#endif\\n#if !defined(SS_LINKREFRACTIONTOTRANSPARENCY) && !defined(ALPHAFRESNEL)\\n#ifdef ALPHATEST\\nif (alpha<ALPHATESTVALUE)\\ndiscard;\\n#ifndef ALPHABLEND\\n\\nalpha=1.0;\\n#endif\\n#endif\\n#endif\\n#define CUSTOM_FRAGMENT_UPDATE_ALPHA\\n#include<depthPrePass>\\n#define CUSTOM_FRAGMENT_BEFORE_LIGHTS\\n\\nvec3 ambientOcclusionColor=vec3(1.,1.,1.);\\n#ifdef AMBIENT\\nvec3 ambientOcclusionColorMap=texture2D(ambientSampler,vAmbientUV+uvOffset).rgb*vAmbientInfos.y;\\n#ifdef AMBIENTINGRAYSCALE\\nambientOcclusionColorMap=vec3(ambientOcclusionColorMap.r,ambientOcclusionColorMap.r,ambientOcclusionColorMap.r);\\n#endif\\nambientOcclusionColor=mix(ambientOcclusionColor,ambientOcclusionColorMap,vAmbientInfos.z);\\n#endif\\n#ifdef UNLIT\\nvec3 diffuseBase=vec3(1.,1.,1.);\\n#else\\n\\nfloat microSurface=vReflectivityColor.a;\\nvec3 surfaceReflectivityColor=vReflectivityColor.rgb;\\n#ifdef METALLICWORKFLOW\\nvec2 metallicRoughness=surfaceReflectivityColor.rg;\\n#ifdef REFLECTIVITY\\nvec4 surfaceMetallicColorMap=texture2D(reflectivitySampler,vReflectivityUV+uvOffset);\\n#ifdef AOSTOREINMETALMAPRED\\nvec3 aoStoreInMetalMap=vec3(surfaceMetallicColorMap.r,surfaceMetallicColorMap.r,surfaceMetallicColorMap.r);\\nambientOcclusionColor=mix(ambientOcclusionColor,aoStoreInMetalMap,vReflectivityInfos.z);\\n#endif\\n#ifdef METALLNESSSTOREINMETALMAPBLUE\\nmetallicRoughness.r*=surfaceMetallicColorMap.b;\\n#else\\nmetallicRoughness.r*=surfaceMetallicColorMap.r;\\n#endif\\n#ifdef ROUGHNESSSTOREINMETALMAPALPHA\\nmetallicRoughness.g*=surfaceMetallicColorMap.a;\\n#else\\n#ifdef ROUGHNESSSTOREINMETALMAPGREEN\\nmetallicRoughness.g*=surfaceMetallicColorMap.g;\\n#endif\\n#endif\\n#endif\\n#ifdef MICROSURFACEMAP\\nvec4 microSurfaceTexel=texture2D(microSurfaceSampler,vMicroSurfaceSamplerUV+uvOffset)*vMicroSurfaceSamplerInfos.y;\\nmetallicRoughness.g*=microSurfaceTexel.r;\\n#endif\\n#define CUSTOM_FRAGMENT_UPDATE_METALLICROUGHNESS\\n\\nmicroSurface=1.0-metallicRoughness.g;\\n\\nvec3 baseColor=surfaceAlbedo;\\n#ifdef REFLECTANCE\\n\\n\\n\\n\\n\\nsurfaceAlbedo=baseColor.rgb*(1.0-metallicRoughness.r);\\n\\nsurfaceReflectivityColor=mix(0.16*reflectance*reflectance,baseColor,metallicRoughness.r);\\n#else\\n\\n\\n\\nconst vec3 DefaultSpecularReflectanceDielectric=vec3(0.04,0.04,0.04);\\n\\nsurfaceAlbedo=mix(baseColor.rgb*(1.0-DefaultSpecularReflectanceDielectric.r),vec3(0.,0.,0.),metallicRoughness.r);\\n\\nsurfaceReflectivityColor=mix(DefaultSpecularReflectanceDielectric,baseColor,metallicRoughness.r);\\n#endif\\n#else\\n#ifdef REFLECTIVITY\\nvec4 surfaceReflectivityColorMap=texture2D(reflectivitySampler,vReflectivityUV+uvOffset);\\nsurfaceReflectivityColor*=toLinearSpace(surfaceReflectivityColorMap.rgb);\\nsurfaceReflectivityColor*=vReflectivityInfos.y;\\n#ifdef MICROSURFACEFROMREFLECTIVITYMAP\\nmicroSurface*=surfaceReflectivityColorMap.a;\\nmicroSurface*=vReflectivityInfos.z;\\n#else\\n#ifdef MICROSURFACEAUTOMATIC\\nmicroSurface*=computeDefaultMicroSurface(microSurface,surfaceReflectivityColor);\\n#endif\\n#ifdef MICROSURFACEMAP\\nvec4 microSurfaceTexel=texture2D(microSurfaceSampler,vMicroSurfaceSamplerUV+uvOffset)*vMicroSurfaceSamplerInfos.y;\\nmicroSurface*=microSurfaceTexel.r;\\n#endif\\n#define CUSTOM_FRAGMENT_UPDATE_MICROSURFACE\\n#endif\\n#endif\\n#endif\\n\\nmicroSurface=saturate(microSurface);\\n\\nfloat roughness=1.-microSurface;\\n\\n#ifdef ALPHAFRESNEL\\n#if defined(ALPHATEST) || defined(ALPHABLEND)\\n\\n\\n\\nfloat opacityPerceptual=alpha;\\n#ifdef LINEARALPHAFRESNEL\\nfloat opacity0=opacityPerceptual;\\n#else\\nfloat opacity0=opacityPerceptual*opacityPerceptual;\\n#endif\\nfloat opacity90=fresnelGrazingReflectance(opacity0);\\nvec3 normalForward=faceforward(normalW,-viewDirectionW,normalW);\\n\\nalpha=getReflectanceFromAnalyticalBRDFLookup_Jones(saturate(dot(viewDirectionW,normalForward)),vec3(opacity0),vec3(opacity90),sqrt(microSurface)).x;\\n#ifdef ALPHATEST\\nif (alpha<ALPHATESTVALUE)\\ndiscard;\\n#ifndef ALPHABLEND\\n\\nalpha=1.0;\\n#endif\\n#endif\\n#endif\\n#endif\\n\\nfloat NdotVUnclamped=dot(normalW,viewDirectionW);\\n\\nfloat NdotV=absEps(NdotVUnclamped);\\nfloat alphaG=convertRoughnessToAverageSlope(roughness);\\nvec2 AARoughnessFactors=getAARoughnessFactors(normalW.xyz);\\n#ifdef SPECULARAA\\n\\nalphaG+=AARoughnessFactors.y;\\n#endif\\n#ifdef ANISOTROPIC\\nfloat anisotropy=vAnisotropy.b;\\nvec3 anisotropyDirection=vec3(vAnisotropy.xy,0.);\\n#ifdef ANISOTROPIC_TEXTURE\\nvec3 anisotropyMapData=texture2D(anisotropySampler,vAnisotropyUV+uvOffset).rgb*vAnisotropyInfos.y;\\nanisotropy*=anisotropyMapData.b;\\nanisotropyDirection.rg*=anisotropyMapData.rg*2.0-1.0;\\n#endif\\nmat3 anisoTBN=mat3(normalize(TBN[0]),normalize(TBN[1]),normalize(TBN[2]));\\nvec3 anisotropicTangent=normalize(anisoTBN*anisotropyDirection);\\nvec3 anisotropicBitangent=normalize(cross(anisoTBN[2],anisotropicTangent));\\nvec3 anisotropicNormal=getAnisotropicBentNormals(anisotropicTangent,anisotropicBitangent,normalW,viewDirectionW,anisotropy);\\n#endif\\n\\n#ifdef SS_REFRACTION\\nvec4 environmentRefraction=vec4(0.,0.,0.,0.);\\n#ifdef ANISOTROPIC\\nvec3 refractionVector=refract(-viewDirectionW,anisotropicNormal,vRefractionInfos.y);\\n#else\\nvec3 refractionVector=refract(-viewDirectionW,normalW,vRefractionInfos.y);\\n#endif\\n#ifdef SS_REFRACTIONMAP_OPPOSITEZ\\nrefractionVector.z*=-1.0;\\n#endif\\n\\n#ifdef SS_REFRACTIONMAP_3D\\nrefractionVector.y=refractionVector.y*vRefractionInfos.w;\\nvec3 refractionCoords=refractionVector;\\nrefractionCoords=vec3(refractionMatrix*vec4(refractionCoords,0));\\n#else\\nvec3 vRefractionUVW=vec3(refractionMatrix*(view*vec4(vPositionW+refractionVector*vRefractionInfos.z,1.0)));\\nvec2 refractionCoords=vRefractionUVW.xy/vRefractionUVW.z;\\nrefractionCoords.y=1.0-refractionCoords.y;\\n#endif\\n#ifdef SS_LODINREFRACTIONALPHA\\nfloat refractionLOD=getLodFromAlphaG(vRefractionMicrosurfaceInfos.x,alphaG,NdotVUnclamped);\\n#else\\nfloat refractionLOD=getLodFromAlphaG(vRefractionMicrosurfaceInfos.x,alphaG);\\n#endif\\n#ifdef LODBASEDMICROSFURACE\\n\\nrefractionLOD=refractionLOD*vRefractionMicrosurfaceInfos.y+vRefractionMicrosurfaceInfos.z;\\n#ifdef SS_LODINREFRACTIONALPHA\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nfloat automaticRefractionLOD=UNPACK_LOD(sampleRefraction(refractionSampler,refractionCoords).a);\\nfloat requestedRefractionLOD=max(automaticRefractionLOD,refractionLOD);\\n#else\\nfloat requestedRefractionLOD=refractionLOD;\\n#endif\\nenvironmentRefraction=sampleRefractionLod(refractionSampler,refractionCoords,requestedRefractionLOD);\\n#else\\nfloat lodRefractionNormalized=saturate(refractionLOD/log2(vRefractionMicrosurfaceInfos.x));\\nfloat lodRefractionNormalizedDoubled=lodRefractionNormalized*2.0;\\nvec4 environmentRefractionMid=sampleRefraction(refractionSampler,refractionCoords);\\nif(lodRefractionNormalizedDoubled<1.0){\\nenvironmentRefraction=mix(\\nsampleRefraction(refractionSamplerHigh,refractionCoords),\\nenvironmentRefractionMid,\\nlodRefractionNormalizedDoubled\\n);\\n}else{\\nenvironmentRefraction=mix(\\nenvironmentRefractionMid,\\nsampleRefraction(refractionSamplerLow,refractionCoords),\\nlodRefractionNormalizedDoubled-1.0\\n);\\n}\\n#endif\\n#ifdef SS_RGBDREFRACTION\\nenvironmentRefraction.rgb=fromRGBD(environmentRefraction);\\n#endif\\n#ifdef SS_GAMMAREFRACTION\\nenvironmentRefraction.rgb=toLinearSpace(environmentRefraction.rgb);\\n#endif\\n\\nenvironmentRefraction.rgb*=vRefractionInfos.x;\\n#endif\\n\\n#ifdef REFLECTION\\nvec4 environmentRadiance=vec4(0.,0.,0.,0.);\\nvec3 environmentIrradiance=vec3(0.,0.,0.);\\n#ifdef ANISOTROPIC\\nvec3 reflectionVector=computeReflectionCoords(vec4(vPositionW,1.0),anisotropicNormal);\\n#else\\nvec3 reflectionVector=computeReflectionCoords(vec4(vPositionW,1.0),normalW);\\n#endif\\n#ifdef REFLECTIONMAP_OPPOSITEZ\\nreflectionVector.z*=-1.0;\\n#endif\\n\\n#ifdef REFLECTIONMAP_3D\\nvec3 reflectionCoords=reflectionVector;\\n#else\\nvec2 reflectionCoords=reflectionVector.xy;\\n#ifdef REFLECTIONMAP_PROJECTION\\nreflectionCoords/=reflectionVector.z;\\n#endif\\nreflectionCoords.y=1.0-reflectionCoords.y;\\n#endif\\n#if defined(LODINREFLECTIONALPHA) && !defined(REFLECTIONMAP_SKYBOX)\\nfloat reflectionLOD=getLodFromAlphaG(vReflectionMicrosurfaceInfos.x,alphaG,NdotVUnclamped);\\n#else\\nfloat reflectionLOD=getLodFromAlphaG(vReflectionMicrosurfaceInfos.x,alphaG);\\n#endif\\n#ifdef LODBASEDMICROSFURACE\\n\\nreflectionLOD=reflectionLOD*vReflectionMicrosurfaceInfos.y+vReflectionMicrosurfaceInfos.z;\\n#ifdef LODINREFLECTIONALPHA\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nfloat automaticReflectionLOD=UNPACK_LOD(sampleReflection(reflectionSampler,reflectionCoords).a);\\nfloat requestedReflectionLOD=max(automaticReflectionLOD,reflectionLOD);\\n#else\\nfloat requestedReflectionLOD=reflectionLOD;\\n#endif\\nenvironmentRadiance=sampleReflectionLod(reflectionSampler,reflectionCoords,requestedReflectionLOD);\\n#else\\nfloat lodReflectionNormalized=saturate(reflectionLOD/log2(vReflectionMicrosurfaceInfos.x));\\nfloat lodReflectionNormalizedDoubled=lodReflectionNormalized*2.0;\\nvec4 environmentSpecularMid=sampleReflection(reflectionSampler,reflectionCoords);\\nif(lodReflectionNormalizedDoubled<1.0){\\nenvironmentRadiance=mix(\\nsampleReflection(reflectionSamplerHigh,reflectionCoords),\\nenvironmentSpecularMid,\\nlodReflectionNormalizedDoubled\\n);\\n}else{\\nenvironmentRadiance=mix(\\nenvironmentSpecularMid,\\nsampleReflection(reflectionSamplerLow,reflectionCoords),\\nlodReflectionNormalizedDoubled-1.0\\n);\\n}\\n#endif\\n#ifdef RGBDREFLECTION\\nenvironmentRadiance.rgb=fromRGBD(environmentRadiance);\\n#endif\\n#ifdef GAMMAREFLECTION\\nenvironmentRadiance.rgb=toLinearSpace(environmentRadiance.rgb);\\n#endif\\n\\n#ifdef USESPHERICALFROMREFLECTIONMAP\\n#if defined(NORMAL) && defined(USESPHERICALINVERTEX)\\nenvironmentIrradiance=vEnvironmentIrradiance;\\n#else\\n#ifdef ANISOTROPIC\\nvec3 irradianceVector=vec3(reflectionMatrix*vec4(anisotropicNormal,0)).xyz;\\n#else\\nvec3 irradianceVector=vec3(reflectionMatrix*vec4(normalW,0)).xyz;\\n#endif\\n#ifdef REFLECTIONMAP_OPPOSITEZ\\nirradianceVector.z*=-1.0;\\n#endif\\nenvironmentIrradiance=computeEnvironmentIrradiance(irradianceVector);\\n#endif\\n#endif\\n\\nenvironmentRadiance.rgb*=vReflectionInfos.x;\\nenvironmentRadiance.rgb*=vReflectionColor.rgb;\\nenvironmentIrradiance*=vReflectionColor.rgb;\\n#endif\\n\\nfloat reflectance=max(max(surfaceReflectivityColor.r,surfaceReflectivityColor.g),surfaceReflectivityColor.b);\\nfloat reflectance90=fresnelGrazingReflectance(reflectance);\\nvec3 specularEnvironmentR0=surfaceReflectivityColor.rgb;\\nvec3 specularEnvironmentR90=vec3(1.0,1.0,1.0)*reflectance90;\\n\\n#ifdef SHEEN\\nfloat sheenIntensity=vSheenColor.a;\\n#ifdef SHEEN_TEXTURE\\nvec4 sheenMapData=texture2D(sheenSampler,vSheenUV+uvOffset)*vSheenInfos.y;\\nsheenIntensity*=sheenMapData.a;\\n#endif\\n#ifdef SHEEN_LINKWITHALBEDO\\nfloat sheenFactor=pow5(1.0-sheenIntensity);\\nvec3 sheenColor=baseColor.rgb*(1.0-sheenFactor);\\nfloat sheenRoughness=sheenIntensity;\\n\\nsurfaceAlbedo.rgb*=sheenFactor;\\n#else\\nvec3 sheenColor=vSheenColor.rgb;\\n#ifdef SHEEN_TEXTURE\\nsheenColor.rgb*=toLinearSpace(sheenMapData.rgb);\\n#endif\\nfloat sheenRoughness=roughness;\\n\\nsheenIntensity*=(1.-reflectance);\\n\\nsheenColor*=sheenIntensity;\\n#endif\\n\\n#if defined(REFLECTION)\\nfloat sheenAlphaG=convertRoughnessToAverageSlope(sheenRoughness);\\n#ifdef SPECULARAA\\n\\nsheenAlphaG+=AARoughnessFactors.y;\\n#endif\\nvec4 environmentSheenRadiance=vec4(0.,0.,0.,0.);\\n\\n#if defined(LODINREFLECTIONALPHA) && !defined(REFLECTIONMAP_SKYBOX)\\nfloat sheenReflectionLOD=getLodFromAlphaG(vReflectionMicrosurfaceInfos.x,sheenAlphaG,NdotVUnclamped);\\n#else\\nfloat sheenReflectionLOD=getLodFromAlphaG(vReflectionMicrosurfaceInfos.x,sheenAlphaG);\\n#endif\\n#ifdef LODBASEDMICROSFURACE\\n\\nsheenReflectionLOD=sheenReflectionLOD*vReflectionMicrosurfaceInfos.y+vReflectionMicrosurfaceInfos.z;\\nenvironmentSheenRadiance=sampleReflectionLod(reflectionSampler,reflectionCoords,sheenReflectionLOD);\\n#else\\nfloat lodSheenReflectionNormalized=saturate(sheenReflectionLOD/log2(vReflectionMicrosurfaceInfos.x));\\nfloat lodSheenReflectionNormalizedDoubled=lodSheenReflectionNormalized*2.0;\\nvec4 environmentSheenMid=sampleReflection(reflectionSampler,reflectionCoords);\\nif(lodSheenReflectionNormalizedDoubled<1.0){\\nenvironmentSheenRadiance=mix(\\nsampleReflection(reflectionSamplerHigh,reflectionCoords),\\nenvironmentSheenMid,\\nlodSheenReflectionNormalizedDoubled\\n);\\n}else{\\nenvironmentSheenRadiance=mix(\\nenvironmentSheenMid,\\nsampleReflection(reflectionSamplerLow,reflectionCoords),\\nlodSheenReflectionNormalizedDoubled-1.0\\n);\\n}\\n#endif\\n#ifdef RGBDREFLECTION\\nenvironmentSheenRadiance.rgb=fromRGBD(environmentSheenRadiance);\\n#endif\\n#ifdef GAMMAREFLECTION\\nenvironmentSheenRadiance.rgb=toLinearSpace(environmentSheenRadiance.rgb);\\n#endif\\n\\nenvironmentSheenRadiance.rgb*=vReflectionInfos.x;\\nenvironmentSheenRadiance.rgb*=vReflectionColor.rgb;\\n#endif\\n#endif\\n\\n#ifdef CLEARCOAT\\n\\nfloat clearCoatIntensity=vClearCoatParams.x;\\nfloat clearCoatRoughness=vClearCoatParams.y;\\n#ifdef CLEARCOAT_TEXTURE\\nvec2 clearCoatMapData=texture2D(clearCoatSampler,vClearCoatUV+uvOffset).rg*vClearCoatInfos.y;\\nclearCoatIntensity*=clearCoatMapData.x;\\nclearCoatRoughness*=clearCoatMapData.y;\\n#endif\\n#ifdef CLEARCOAT_TINT\\nvec3 clearCoatColor=vClearCoatTintParams.rgb;\\nfloat clearCoatThickness=vClearCoatTintParams.a;\\n#ifdef CLEARCOAT_TINT_TEXTURE\\nvec4 clearCoatTintMapData=texture2D(clearCoatTintSampler,vClearCoatTintUV+uvOffset);\\nclearCoatColor*=toLinearSpace(clearCoatTintMapData.rgb);\\nclearCoatThickness*=clearCoatTintMapData.a;\\n#endif\\nclearCoatColor=computeColorAtDistanceInMedia(clearCoatColor,clearCoatColorAtDistance);\\n#endif\\n\\n\\n\\n\\nvec3 specularEnvironmentR0Updated=getR0RemappedForClearCoat(specularEnvironmentR0);\\nspecularEnvironmentR0=mix(specularEnvironmentR0,specularEnvironmentR0Updated,clearCoatIntensity);\\n#ifdef CLEARCOAT_BUMP\\n#ifdef NORMALXYSCALE\\nfloat clearCoatNormalScale=1.0;\\n#else\\nfloat clearCoatNormalScale=vClearCoatBumpInfos.y;\\n#endif\\n#if defined(TANGENT) && defined(NORMAL)\\nmat3 TBNClearCoat=vTBN;\\n#else\\nmat3 TBNClearCoat=cotangent_frame(clearCoatNormalW*clearCoatNormalScale,vPositionW,vClearCoatBumpUV,vClearCoatTangentSpaceParams);\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\nclearCoatNormalW=normalize(texture2D(clearCoatBumpSampler,vClearCoatBumpUV+uvOffset).xyz*2.0-1.0);\\nclearCoatNormalW=normalize(mat3(normalMatrix)*clearCoatNormalW);\\n#else\\nclearCoatNormalW=perturbNormal(TBN,vClearCoatBumpUV+uvOffset,clearCoatBumpSampler,vClearCoatBumpInfos.y);\\n#endif\\n#endif\\n#if defined(FORCENORMALFORWARD) && defined(NORMAL)\\nclearCoatNormalW*=sign(dot(clearCoatNormalW,faceNormal));\\n#endif\\n#if defined(TWOSIDEDLIGHTING) && defined(NORMAL)\\nclearCoatNormalW=gl_FrontFacing ? clearCoatNormalW : -clearCoatNormalW;\\n#endif\\n\\nvec2 clearCoatAARoughnessFactors=getAARoughnessFactors(clearCoatNormalW.xyz);\\n\\nfloat clearCoatNdotVUnclamped=dot(clearCoatNormalW,viewDirectionW);\\n\\nfloat clearCoatNdotV=absEps(clearCoatNdotVUnclamped);\\n\\n#if defined(REFLECTION)\\nfloat clearCoatAlphaG=convertRoughnessToAverageSlope(clearCoatRoughness);\\n#ifdef SPECULARAA\\n\\nclearCoatAlphaG+=clearCoatAARoughnessFactors.y;\\n#endif\\nvec4 environmentClearCoatRadiance=vec4(0.,0.,0.,0.);\\nvec3 clearCoatReflectionVector=computeReflectionCoords(vec4(vPositionW,1.0),clearCoatNormalW);\\n#ifdef REFLECTIONMAP_OPPOSITEZ\\nclearCoatReflectionVector.z*=-1.0;\\n#endif\\n\\n#ifdef REFLECTIONMAP_3D\\nvec3 clearCoatReflectionCoords=clearCoatReflectionVector;\\n#else\\nvec2 clearCoatReflectionCoords=clearCoatReflectionVector.xy;\\n#ifdef REFLECTIONMAP_PROJECTION\\nclearCoatReflectionCoords/=clearCoatReflectionVector.z;\\n#endif\\nclearCoatReflectionCoords.y=1.0-clearCoatReflectionCoords.y;\\n#endif\\n#if defined(LODINREFLECTIONALPHA) && !defined(REFLECTIONMAP_SKYBOX)\\nfloat clearCoatReflectionLOD=getLodFromAlphaG(vReflectionMicrosurfaceInfos.x,clearCoatAlphaG,clearCoatNdotVUnclamped);\\n#else\\nfloat clearCoatReflectionLOD=getLodFromAlphaG(vReflectionMicrosurfaceInfos.x,clearCoatAlphaG);\\n#endif\\n#ifdef LODBASEDMICROSFURACE\\n\\nclearCoatReflectionLOD=clearCoatReflectionLOD*vReflectionMicrosurfaceInfos.y+vReflectionMicrosurfaceInfos.z;\\nfloat requestedClearCoatReflectionLOD=clearCoatReflectionLOD;\\nenvironmentClearCoatRadiance=sampleReflectionLod(reflectionSampler,clearCoatReflectionCoords,requestedClearCoatReflectionLOD);\\n#else\\nfloat lodClearCoatReflectionNormalized=saturate(clearCoatReflectionLOD/log2(vReflectionMicrosurfaceInfos.x));\\nfloat lodClearCoatReflectionNormalizedDoubled=lodClearCoatReflectionNormalized*2.0;\\nvec4 environmentClearCoatMid=sampleReflection(reflectionSampler,reflectionCoords);\\nif(lodClearCoatReflectionNormalizedDoubled<1.0){\\nenvironmentClearCoatRadiance=mix(\\nsampleReflection(reflectionSamplerHigh,clearCoatReflectionCoords),\\nenvironmentClearCoatMid,\\nlodClearCoatReflectionNormalizedDoubled\\n);\\n}else{\\nenvironmentClearCoatRadiance=mix(\\nenvironmentClearCoatMid,\\nsampleReflection(reflectionSamplerLow,clearCoatReflectionCoords),\\nlodClearCoatReflectionNormalizedDoubled-1.0\\n);\\n}\\n#endif\\n#ifdef RGBDREFLECTION\\nenvironmentClearCoatRadiance.rgb=fromRGBD(environmentClearCoatRadiance);\\n#endif\\n#ifdef GAMMAREFLECTION\\nenvironmentClearCoatRadiance.rgb=toLinearSpace(environmentClearCoatRadiance.rgb);\\n#endif\\n#ifdef CLEARCOAT_TINT\\n\\nvec3 clearCoatVRefract=-refract(vPositionW,clearCoatNormalW,vClearCoatRefractionParams.y);\\n\\nfloat clearCoatNdotVRefract=absEps(dot(clearCoatNormalW,clearCoatVRefract));\\nvec3 absorption=vec3(0.);\\n#endif\\n\\nenvironmentClearCoatRadiance.rgb*=vReflectionInfos.x;\\nenvironmentClearCoatRadiance.rgb*=vReflectionColor.rgb;\\n#endif\\n#endif\\n\\n#if defined(ENVIRONMENTBRDF)\\n\\nvec3 environmentBrdf=getBRDFLookup(NdotV,roughness,environmentBrdfSampler);\\n#ifdef MS_BRDF_ENERGY_CONSERVATION\\nvec3 energyConservationFactor=getEnergyConservationFactor(specularEnvironmentR0,environmentBrdf);\\n#endif\\n#endif\\n\\n#ifdef SUBSURFACE\\n#ifdef SS_REFRACTION\\nfloat refractionIntensity=vSubSurfaceIntensity.x;\\n#ifdef SS_LINKREFRACTIONTOTRANSPARENCY\\nrefractionIntensity*=(1.0-alpha);\\n\\nalpha=1.0;\\n#endif\\n#endif\\n#ifdef SS_TRANSLUCENCY\\nfloat translucencyIntensity=vSubSurfaceIntensity.y;\\n#endif\\n#ifdef SS_SCATTERING\\nfloat scatteringIntensity=vSubSurfaceIntensity.z;\\n#endif\\n#ifdef SS_THICKNESSANDMASK_TEXTURE\\nvec4 thicknessMap=texture2D(thicknessSampler,vThicknessUV+uvOffset);\\nfloat thickness=thicknessMap.r*vThicknessParam.y+vThicknessParam.x;\\n#ifdef SS_MASK_FROM_THICKNESS_TEXTURE\\n#ifdef SS_REFRACTION\\nrefractionIntensity*=thicknessMap.g;\\n#endif\\n#ifdef SS_TRANSLUCENCY\\ntranslucencyIntensity*=thicknessMap.b;\\n#endif\\n#ifdef SS_SCATTERING\\nscatteringIntensity*=thicknessMap.a;\\n#endif\\n#endif\\n#else\\nfloat thickness=vThicknessParam.y;\\n#endif\\n#ifdef SS_TRANSLUCENCY\\nthickness=maxEps(thickness);\\nvec3 transmittance=transmittanceBRDF_Burley(vTintColor.rgb,vDiffusionDistance,thickness);\\ntransmittance*=translucencyIntensity;\\n#endif\\n#endif\\n\\n\\nvec3 diffuseBase=vec3(0.,0.,0.);\\n#ifdef SPECULARTERM\\nvec3 specularBase=vec3(0.,0.,0.);\\n#endif\\n#ifdef CLEARCOAT\\nvec3 clearCoatBase=vec3(0.,0.,0.);\\n#endif\\n#ifdef SHEEN\\nvec3 sheenBase=vec3(0.,0.,0.);\\n#endif\\n#ifdef LIGHTMAP\\nvec3 lightmapColor=texture2D(lightmapSampler,vLightmapUV+uvOffset).rgb;\\n#ifdef GAMMALIGHTMAP\\nlightmapColor=toLinearSpace(lightmapColor);\\n#endif\\nlightmapColor*=vLightmapInfos.y;\\n#endif\\n\\npreLightingInfo preInfo;\\nlightingInfo info;\\nfloat shadow=1.;\\n#include<lightFragment>[0..maxSimultaneousLights]\\n\\n#if defined(ENVIRONMENTBRDF) && !defined(REFLECTIONMAP_SKYBOX)\\nvec3 specularEnvironmentReflectance=getReflectanceFromBRDFLookup(specularEnvironmentR0,environmentBrdf);\\n#ifdef RADIANCEOCCLUSION\\n#ifdef AMBIENTINGRAYSCALE\\nfloat ambientMonochrome=ambientOcclusionColor.r;\\n#else\\nfloat ambientMonochrome=getLuminance(ambientOcclusionColor);\\n#endif\\nfloat seo=environmentRadianceOcclusion(ambientMonochrome,NdotVUnclamped);\\nspecularEnvironmentReflectance*=seo;\\n#endif\\n#ifdef HORIZONOCCLUSION\\n#ifdef BUMP\\n#ifdef REFLECTIONMAP_3D\\nfloat eho=environmentHorizonOcclusion(-viewDirectionW,normalW);\\nspecularEnvironmentReflectance*=eho;\\n#endif\\n#endif\\n#endif\\n#else\\n\\nvec3 specularEnvironmentReflectance=getReflectanceFromAnalyticalBRDFLookup_Jones(NdotV,specularEnvironmentR0,specularEnvironmentR90,sqrt(microSurface));\\n#endif\\n\\n#if defined(SHEEN) && defined(REFLECTION)\\nvec3 sheenEnvironmentReflectance=getSheenReflectanceFromBRDFLookup(sheenColor,environmentBrdf);\\n#ifdef RADIANCEOCCLUSION\\nsheenEnvironmentReflectance*=seo;\\n#endif\\n#ifdef HORIZONOCCLUSION\\n#ifdef BUMP\\n#ifdef REFLECTIONMAP_3D\\nsheenEnvironmentReflectance*=eho;\\n#endif\\n#endif\\n#endif\\n#endif\\n\\n#ifdef CLEARCOAT\\n#if defined(ENVIRONMENTBRDF) && !defined(REFLECTIONMAP_SKYBOX)\\n\\nvec3 environmentClearCoatBrdf=getBRDFLookup(clearCoatNdotV,clearCoatRoughness,environmentBrdfSampler);\\nvec3 clearCoatEnvironmentReflectance=getReflectanceFromBRDFLookup(vec3(vClearCoatRefractionParams.x),environmentClearCoatBrdf);\\n#ifdef RADIANCEOCCLUSION\\nfloat clearCoatSeo=environmentRadianceOcclusion(ambientMonochrome,clearCoatNdotVUnclamped);\\nclearCoatEnvironmentReflectance*=clearCoatSeo;\\n#endif\\n#ifdef HORIZONOCCLUSION\\n#ifdef BUMP\\n#ifdef REFLECTIONMAP_3D\\nfloat clearCoatEho=environmentHorizonOcclusion(-viewDirectionW,clearCoatNormalW);\\nclearCoatEnvironmentReflectance*=clearCoatEho;\\n#endif\\n#endif\\n#endif\\n#else\\n\\nvec3 clearCoatEnvironmentReflectance=getReflectanceFromAnalyticalBRDFLookup_Jones(clearCoatNdotV,vec3(1.),vec3(1.),sqrt(1.-clearCoatRoughness));\\n#endif\\nclearCoatEnvironmentReflectance*=clearCoatIntensity;\\n#ifdef CLEARCOAT_TINT\\n\\nabsorption=computeClearCoatAbsorption(clearCoatNdotVRefract,clearCoatNdotVRefract,clearCoatColor,clearCoatThickness,clearCoatIntensity);\\n#ifdef REFLECTION\\nenvironmentIrradiance*=absorption;\\n#endif\\n#ifdef SHEEN\\nsheenEnvironmentReflectance*=absorption;\\n#endif\\nspecularEnvironmentReflectance*=absorption;\\n#endif\\n\\nfloat fresnelIBLClearCoat=fresnelSchlickGGX(clearCoatNdotV,vClearCoatRefractionParams.x,CLEARCOATREFLECTANCE90);\\nfresnelIBLClearCoat*=clearCoatIntensity;\\nfloat conservationFactor=(1.-fresnelIBLClearCoat);\\n#ifdef REFLECTION\\nenvironmentIrradiance*=conservationFactor;\\n#endif\\n#ifdef SHEEN\\nsheenEnvironmentReflectance*=(conservationFactor*conservationFactor);\\n#endif\\nspecularEnvironmentReflectance*=(conservationFactor*conservationFactor);\\n#endif\\n\\n#ifdef SS_REFRACTION\\nvec3 refractionTransmittance=vec3(refractionIntensity);\\n#ifdef SS_THICKNESSANDMASK_TEXTURE\\nvec3 volumeAlbedo=computeColorAtDistanceInMedia(vTintColor.rgb,vTintColor.w);\\n\\n\\n\\n\\n\\nrefractionTransmittance*=cocaLambert(volumeAlbedo,thickness);\\n#elif defined(SS_LINKREFRACTIONTOTRANSPARENCY)\\n\\nfloat maxChannel=max(max(surfaceAlbedo.r,surfaceAlbedo.g),surfaceAlbedo.b);\\nvec3 volumeAlbedo=saturate(maxChannel*surfaceAlbedo);\\n\\nenvironmentRefraction.rgb*=volumeAlbedo;\\n#else\\n\\nvec3 volumeAlbedo=computeColorAtDistanceInMedia(vTintColor.rgb,vTintColor.w);\\nrefractionTransmittance*=cocaLambert(volumeAlbedo,vThicknessParam.y);\\n#endif\\n\\nsurfaceAlbedo*=(1.-refractionIntensity);\\n\\nenvironmentIrradiance*=(1.-refractionIntensity);\\n\\nvec3 bounceSpecularEnvironmentReflectance=(2.0*specularEnvironmentReflectance)/(1.0+specularEnvironmentReflectance);\\nspecularEnvironmentReflectance=mix(bounceSpecularEnvironmentReflectance,specularEnvironmentReflectance,refractionIntensity);\\n\\nrefractionTransmittance*=1.0-specularEnvironmentReflectance;\\n#endif\\n\\n#if defined(REFLECTION) && defined(USESPHERICALFROMREFLECTIONMAP) && defined(SS_TRANSLUCENCY)\\n#if defined(USESPHERICALINVERTEX)\\nvec3 irradianceVector=vec3(reflectionMatrix*vec4(normalW,0)).xyz;\\n#ifdef REFLECTIONMAP_OPPOSITEZ\\nirradianceVector.z*=-1.0;\\n#endif\\n#endif\\nvec3 refractionIrradiance=computeEnvironmentIrradiance(-irradianceVector);\\nrefractionIrradiance*=transmittance;\\n#endif\\n\\n\\n\\n#ifndef METALLICWORKFLOW\\nsurfaceAlbedo.rgb=(1.-reflectance)*surfaceAlbedo.rgb;\\n#endif\\n\\n#ifdef REFLECTION\\nvec3 finalIrradiance=environmentIrradiance;\\n#if defined(USESPHERICALFROMREFLECTIONMAP) && defined(SS_TRANSLUCENCY)\\nfinalIrradiance+=refractionIrradiance;\\n#endif\\nfinalIrradiance*=surfaceAlbedo.rgb;\\n#endif\\n\\n#ifdef SPECULARTERM\\nvec3 finalSpecular=specularBase;\\nfinalSpecular=max(finalSpecular,0.0);\\n\\nvec3 finalSpecularScaled=finalSpecular*vLightingIntensity.x*vLightingIntensity.w;\\n#if defined(ENVIRONMENTBRDF) && defined(MS_BRDF_ENERGY_CONSERVATION)\\nfinalSpecularScaled*=energyConservationFactor;\\n#endif\\n#endif\\n\\n#ifdef REFLECTION\\nvec3 finalRadiance=environmentRadiance.rgb;\\nfinalRadiance*=specularEnvironmentReflectance;\\n\\nvec3 finalRadianceScaled=finalRadiance*vLightingIntensity.z;\\n#if defined(ENVIRONMENTBRDF) && defined(MS_BRDF_ENERGY_CONSERVATION)\\nfinalRadianceScaled*=energyConservationFactor;\\n#endif\\n#endif\\n\\n#ifdef SS_REFRACTION\\nvec3 finalRefraction=environmentRefraction.rgb;\\nfinalRefraction*=refractionTransmittance;\\n#endif\\n\\n#ifdef CLEARCOAT\\nvec3 finalClearCoat=clearCoatBase;\\nfinalClearCoat=max(finalClearCoat,0.0);\\n\\nvec3 finalClearCoatScaled=finalClearCoat*vLightingIntensity.x*vLightingIntensity.w;\\n#if defined(ENVIRONMENTBRDF) && defined(MS_BRDF_ENERGY_CONSERVATION)\\nfinalClearCoatScaled*=energyConservationFactor;\\n#endif\\n\\n#ifdef REFLECTION\\nvec3 finalClearCoatRadiance=environmentClearCoatRadiance.rgb;\\nfinalClearCoatRadiance*=clearCoatEnvironmentReflectance;\\n\\nvec3 finalClearCoatRadianceScaled=finalClearCoatRadiance*vLightingIntensity.z;\\n#endif\\n#ifdef SS_REFRACTION\\nfinalRefraction*=(conservationFactor*conservationFactor);\\n#ifdef CLEARCOAT_TINT\\nfinalRefraction*=absorption;\\n#endif\\n#endif\\n#endif\\n\\n#ifdef SHEEN\\nvec3 finalSheen=sheenBase*sheenColor;\\nfinalSheen=max(finalSheen,0.0);\\nvec3 finalSheenScaled=finalSheen*vLightingIntensity.x*vLightingIntensity.w;\\n\\n\\n\\n\\n\\n#ifdef REFLECTION\\nvec3 finalSheenRadiance=environmentSheenRadiance.rgb;\\nfinalSheenRadiance*=sheenEnvironmentReflectance;\\n\\nvec3 finalSheenRadianceScaled=finalSheenRadiance*vLightingIntensity.z;\\n#endif\\n#endif\\n\\n#ifdef ALPHABLEND\\nfloat luminanceOverAlpha=0.0;\\n#if defined(REFLECTION) && defined(RADIANCEOVERALPHA)\\nluminanceOverAlpha+=getLuminance(finalRadianceScaled);\\n#if defined(CLEARCOAT)\\nluminanceOverAlpha+=getLuminance(finalClearCoatRadianceScaled);\\n#endif\\n#endif\\n#if defined(SPECULARTERM) && defined(SPECULAROVERALPHA)\\nluminanceOverAlpha+=getLuminance(finalSpecularScaled);\\n#endif\\n#if defined(CLEARCOAT) && defined(CLEARCOATOVERALPHA)\\nluminanceOverAlpha+=getLuminance(finalClearCoatScaled);\\n#endif\\n#if defined(RADIANCEOVERALPHA) || defined(SPECULAROVERALPHA)\\nalpha=saturate(alpha+luminanceOverAlpha*luminanceOverAlpha);\\n#endif\\n#endif\\n#endif\\n\\n\\nvec3 finalDiffuse=diffuseBase;\\nfinalDiffuse*=surfaceAlbedo.rgb;\\nfinalDiffuse=max(finalDiffuse,0.0);\\n\\nvec3 finalAmbient=vAmbientColor;\\nfinalAmbient*=surfaceAlbedo.rgb;\\n\\nvec3 finalEmissive=vEmissiveColor;\\n#ifdef EMISSIVE\\nvec3 emissiveColorTex=texture2D(emissiveSampler,vEmissiveUV+uvOffset).rgb;\\nfinalEmissive*=toLinearSpace(emissiveColorTex.rgb);\\nfinalEmissive*=vEmissiveInfos.y;\\n#endif\\n\\n#ifdef AMBIENT\\nvec3 ambientOcclusionForDirectDiffuse=mix(vec3(1.),ambientOcclusionColor,vAmbientInfos.w);\\n#else\\nvec3 ambientOcclusionForDirectDiffuse=ambientOcclusionColor;\\n#endif\\n\\n\\n\\nvec4 finalColor=vec4(\\nfinalAmbient*ambientOcclusionColor +\\nfinalDiffuse*ambientOcclusionForDirectDiffuse*vLightingIntensity.x +\\n#ifndef UNLIT\\n#ifdef REFLECTION\\nfinalIrradiance*ambientOcclusionColor*vLightingIntensity.z +\\n#endif\\n#ifdef SPECULARTERM\\n\\n\\nfinalSpecularScaled +\\n#endif\\n#ifdef CLEARCOAT\\n\\n\\nfinalClearCoatScaled +\\n#endif\\n#ifdef SHEEN\\n\\n\\nfinalSheenScaled +\\n#endif\\n#ifdef REFLECTION\\n\\n\\nfinalRadianceScaled +\\n#ifdef CLEARCOAT\\n\\n\\nfinalClearCoatRadianceScaled +\\n#endif\\n#ifdef SHEEN\\n\\n\\nfinalSheenRadianceScaled +\\n#endif\\n#endif\\n#ifdef SS_REFRACTION\\nfinalRefraction*vLightingIntensity.z +\\n#endif\\n#endif\\nfinalEmissive*vLightingIntensity.y,\\nalpha);\\n\\n#ifdef LIGHTMAP\\n#ifndef LIGHTMAPEXCLUDED\\n#ifdef USELIGHTMAPASSHADOWMAP\\nfinalColor.rgb*=lightmapColor;\\n#else\\nfinalColor.rgb+=lightmapColor;\\n#endif\\n#endif\\n#endif\\n#define CUSTOM_FRAGMENT_BEFORE_FOG\\n\\nfinalColor=max(finalColor,0.0);\\n#include<logDepthFragment>\\n#include<fogFragment>(color,finalColor)\\n#ifdef IMAGEPROCESSINGPOSTPROCESS\\n\\n\\nfinalColor.rgb=clamp(finalColor.rgb,0.,30.0);\\n#else\\n\\nfinalColor=applyImageProcessing(finalColor);\\n#endif\\nfinalColor.a*=visibility;\\n#ifdef PREMULTIPLYALPHA\\n\\nfinalColor.rgb*=finalColor.a;\\n#endif\\n#define CUSTOM_FRAGMENT_BEFORE_FRAGCOLOR\\ngl_FragColor=finalColor;\\n#include<pbrDebug>\\n}\\n\";e.Effect.ShadersStore[n]=a;var i={name:n,shader:a};exports.pbrPixelShader=i;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":1042,"column":7},"generated":{"line":1,"column":0}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":1042,"column":7},"generated":{"line":1,"column":13}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":1042,"column":7},"generated":{"line":1,"column":20}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":1042,"column":7},"generated":{"line":1,"column":35}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":1042,"column":7},"generated":{"line":1,"column":43}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":1042,"column":7},"generated":{"line":1,"column":56}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":1042,"column":7},"generated":{"line":1,"column":57}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":1042,"column":7},"generated":{"line":1,"column":64}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":1042,"column":7},"generated":{"line":1,"column":68}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":1042,"column":7},"generated":{"line":1,"column":76}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":1042,"column":7},"generated":{"line":1,"column":96}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":98}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":102}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":104}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":112}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":135}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":143}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":186}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":194}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":232}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":240}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":1,"column":288}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":1,"column":296}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":1,"column":341}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":1,"column":349}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":7,"column":0},"generated":{"line":1,"column":389}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":7,"column":0},"generated":{"line":1,"column":397}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":1,"column":448}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":1,"column":456}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":9,"column":0},"generated":{"line":1,"column":503}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":9,"column":0},"generated":{"line":1,"column":511}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":10,"column":0},"generated":{"line":1,"column":560}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":10,"column":0},"generated":{"line":1,"column":568}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":11,"column":0},"generated":{"line":1,"column":608}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":11,"column":0},"generated":{"line":1,"column":616}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":1,"column":659}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":1,"column":667}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":1,"column":703}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":1,"column":711}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":14,"column":0},"generated":{"line":1,"column":750}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":14,"column":0},"generated":{"line":1,"column":758}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":1,"column":803}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":1,"column":811}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":1,"column":856}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":1,"column":864}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":1,"column":903}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":1,"column":911}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":1,"column":963}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":1,"column":971}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":1,"column":1025}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":1,"column":1033}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":1,"column":1070}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":1,"column":1078}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":1125}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":1133}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":1,"column":1169}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":1,"column":1177}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":1,"column":1219}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":1,"column":1227}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":1,"column":1266}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":1,"column":1274}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":1,"column":1312}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":1,"column":1320}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":1,"column":1353}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":1,"column":1361}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":27,"column":0},"generated":{"line":1,"column":1394}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":27,"column":0},"generated":{"line":1,"column":1402}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":28,"column":0},"generated":{"line":1,"column":1436}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":28,"column":0},"generated":{"line":1,"column":1444}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":29,"column":0},"generated":{"line":1,"column":1481}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":29,"column":0},"generated":{"line":1,"column":1489}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":30,"column":0},"generated":{"line":1,"column":1521}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":30,"column":0},"generated":{"line":1,"column":1529}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":32,"column":0},"generated":{"line":1,"column":1558}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":32,"column":4},"generated":{"line":1,"column":1562}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":32,"column":11},"generated":{"line":1,"column":1564}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":33,"column":4},"generated":{"line":1,"column":1581}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":33,"column":13},"generated":{"line":1,"column":1583}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":1040,"column":0},"generated":{"line":1,"column":32614}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":1040,"column":7},"generated":{"line":1,"column":32616}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":1040,"column":7},"generated":{"line":1,"column":32623}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":1040,"column":20},"generated":{"line":1,"column":32636}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":1040,"column":28},"generated":{"line":1,"column":32639}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":1042,"column":7},"generated":{"line":1,"column":32641}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":1042,"column":11},"generated":{"line":1,"column":32645}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":1042,"column":28},"generated":{"line":1,"column":32647}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":1042,"column":30},"generated":{"line":1,"column":32648}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":1042,"column":34},"generated":{"line":1,"column":32653}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":1042,"column":36},"generated":{"line":1,"column":32655}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":1042,"column":42},"generated":{"line":1,"column":32662}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":1042,"column":7},"generated":{"line":1,"column":32665}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":1042,"column":7},"generated":{"line":1,"column":32673}},{"source":"../../../sourceES6/core/Shaders/pbr.fragment.ts","name":null,"original":{"line":1042,"column":7},"generated":{"line":1,"column":32688}}],"sources":{"../../../sourceES6/core/Shaders/pbr.fragment.ts":"import { Effect } from \"../Materials/effect\";\nimport \"./ShadersInclude/pbrFragmentDeclaration\";\nimport \"./ShadersInclude/pbrUboDeclaration\";\nimport \"./ShadersInclude/pbrFragmentExtraDeclaration\";\nimport \"./ShadersInclude/lightFragmentDeclaration\";\nimport \"./ShadersInclude/lightUboDeclaration\";\nimport \"./ShadersInclude/pbrFragmentSamplersDeclaration\";\nimport \"./ShadersInclude/imageProcessingDeclaration\";\nimport \"./ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"./ShadersInclude/logDepthDeclaration\";\nimport \"./ShadersInclude/fogFragmentDeclaration\";\nimport \"./ShadersInclude/helperFunctions\";\nimport \"./ShadersInclude/pbrHelperFunctions\";\nimport \"./ShadersInclude/imageProcessingFunctions\";\nimport \"./ShadersInclude/shadowsFragmentFunctions\";\nimport \"./ShadersInclude/harmonicsFunctions\";\nimport \"./ShadersInclude/pbrDirectLightingSetupFunctions\";\nimport \"./ShadersInclude/pbrDirectLightingFalloffFunctions\";\nimport \"./ShadersInclude/pbrBRDFFunctions\";\nimport \"./ShadersInclude/pbrDirectLightingFunctions\";\nimport \"./ShadersInclude/pbrIBLFunctions\";\nimport \"./ShadersInclude/bumpFragmentFunctions\";\nimport \"./ShadersInclude/reflectionFunction\";\nimport \"./ShadersInclude/clipPlaneFragment\";\nimport \"./ShadersInclude/bumpFragment\";\nimport \"./ShadersInclude/depthPrePass\";\nimport \"./ShadersInclude/lightFragment\";\nimport \"./ShadersInclude/logDepthFragment\";\nimport \"./ShadersInclude/fogFragment\";\nimport \"./ShadersInclude/pbrDebug\";\n\nlet name = 'pbrPixelShader';\nlet shader = `#if defined(BUMP) || !defined(NORMAL) || defined(FORCENORMALFORWARD) || defined(SPECULARAA) || defined(CLEARCOAT_BUMP) || defined(ANISOTROPIC)\n#extension GL_OES_standard_derivatives : enable\n#endif\n#ifdef LODBASEDMICROSFURACE\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#define CUSTOM_FRAGMENT_BEGIN\n#ifdef LOGARITHMICDEPTH\n#extension GL_EXT_frag_depth : enable\n#endif\nprecision highp float;\n\n#ifndef FROMLINEARSPACE\n#define FROMLINEARSPACE;\n#endif\n\n#include<__decl__pbrFragment>\n#include<pbrFragmentExtraDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#include<pbrFragmentSamplersDeclaration>\n#include<imageProcessingDeclaration>\n#include<clipPlaneFragmentDeclaration>\n#include<logDepthDeclaration>\n#include<fogFragmentDeclaration>\n\n#include<helperFunctions>\n#include<pbrHelperFunctions>\n#include<imageProcessingFunctions>\n#include<shadowsFragmentFunctions>\n#include<harmonicsFunctions>\n#include<pbrDirectLightingSetupFunctions>\n#include<pbrDirectLightingFalloffFunctions>\n#include<pbrBRDFFunctions>\n#include<pbrDirectLightingFunctions>\n#include<pbrIBLFunctions>\n#include<bumpFragmentFunctions>\n#ifdef REFLECTION\n#include<reflectionFunction>\n#endif\n#define CUSTOM_FRAGMENT_DEFINITIONS\n\nvoid main(void) {\n#define CUSTOM_FRAGMENT_MAIN_BEGIN\n#include<clipPlaneFragment>\n\nvec3 viewDirectionW=normalize(vEyePosition.xyz-vPositionW);\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\n#else\nvec3 normalW=normalize(cross(dFdx(vPositionW),dFdy(vPositionW)))*vEyePosition.w;\n#endif\n#ifdef CLEARCOAT\n\nvec3 clearCoatNormalW=normalW;\n#endif\n#include<bumpFragment>\n#if defined(FORCENORMALFORWARD) && defined(NORMAL)\nvec3 faceNormal=normalize(cross(dFdx(vPositionW),dFdy(vPositionW)))*vEyePosition.w;\n#if defined(TWOSIDEDLIGHTING)\nfaceNormal=gl_FrontFacing ? faceNormal : -faceNormal;\n#endif\nnormalW*=sign(dot(normalW,faceNormal));\n#endif\n#if defined(TWOSIDEDLIGHTING) && defined(NORMAL)\nnormalW=gl_FrontFacing ? normalW : -normalW;\n#endif\n\n\nvec3 surfaceAlbedo=vAlbedoColor.rgb;\n\nfloat alpha=vAlbedoColor.a;\n#ifdef ALBEDO\nvec4 albedoTexture=texture2D(albedoSampler,vAlbedoUV+uvOffset);\n#if defined(ALPHAFROMALBEDO) || defined(ALPHATEST)\nalpha*=albedoTexture.a;\n#endif\nsurfaceAlbedo*=toLinearSpace(albedoTexture.rgb);\nsurfaceAlbedo*=vAlbedoInfos.y;\n#endif\n#ifdef VERTEXCOLOR\nsurfaceAlbedo*=vColor.rgb;\n#endif\n#define CUSTOM_FRAGMENT_UPDATE_ALBEDO\n\n#ifdef OPACITY\nvec4 opacityMap=texture2D(opacitySampler,vOpacityUV+uvOffset);\n#ifdef OPACITYRGB\nalpha=getLuminance(opacityMap.rgb);\n#else\nalpha*=opacityMap.a;\n#endif\nalpha*=vOpacityInfos.y;\n#endif\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\n#if !defined(SS_LINKREFRACTIONTOTRANSPARENCY) && !defined(ALPHAFRESNEL)\n#ifdef ALPHATEST\nif (alpha<ALPHATESTVALUE)\ndiscard;\n#ifndef ALPHABLEND\n\nalpha=1.0;\n#endif\n#endif\n#endif\n#define CUSTOM_FRAGMENT_UPDATE_ALPHA\n#include<depthPrePass>\n#define CUSTOM_FRAGMENT_BEFORE_LIGHTS\n\nvec3 ambientOcclusionColor=vec3(1.,1.,1.);\n#ifdef AMBIENT\nvec3 ambientOcclusionColorMap=texture2D(ambientSampler,vAmbientUV+uvOffset).rgb*vAmbientInfos.y;\n#ifdef AMBIENTINGRAYSCALE\nambientOcclusionColorMap=vec3(ambientOcclusionColorMap.r,ambientOcclusionColorMap.r,ambientOcclusionColorMap.r);\n#endif\nambientOcclusionColor=mix(ambientOcclusionColor,ambientOcclusionColorMap,vAmbientInfos.z);\n#endif\n#ifdef UNLIT\nvec3 diffuseBase=vec3(1.,1.,1.);\n#else\n\nfloat microSurface=vReflectivityColor.a;\nvec3 surfaceReflectivityColor=vReflectivityColor.rgb;\n#ifdef METALLICWORKFLOW\nvec2 metallicRoughness=surfaceReflectivityColor.rg;\n#ifdef REFLECTIVITY\nvec4 surfaceMetallicColorMap=texture2D(reflectivitySampler,vReflectivityUV+uvOffset);\n#ifdef AOSTOREINMETALMAPRED\nvec3 aoStoreInMetalMap=vec3(surfaceMetallicColorMap.r,surfaceMetallicColorMap.r,surfaceMetallicColorMap.r);\nambientOcclusionColor=mix(ambientOcclusionColor,aoStoreInMetalMap,vReflectivityInfos.z);\n#endif\n#ifdef METALLNESSSTOREINMETALMAPBLUE\nmetallicRoughness.r*=surfaceMetallicColorMap.b;\n#else\nmetallicRoughness.r*=surfaceMetallicColorMap.r;\n#endif\n#ifdef ROUGHNESSSTOREINMETALMAPALPHA\nmetallicRoughness.g*=surfaceMetallicColorMap.a;\n#else\n#ifdef ROUGHNESSSTOREINMETALMAPGREEN\nmetallicRoughness.g*=surfaceMetallicColorMap.g;\n#endif\n#endif\n#endif\n#ifdef MICROSURFACEMAP\nvec4 microSurfaceTexel=texture2D(microSurfaceSampler,vMicroSurfaceSamplerUV+uvOffset)*vMicroSurfaceSamplerInfos.y;\nmetallicRoughness.g*=microSurfaceTexel.r;\n#endif\n#define CUSTOM_FRAGMENT_UPDATE_METALLICROUGHNESS\n\nmicroSurface=1.0-metallicRoughness.g;\n\nvec3 baseColor=surfaceAlbedo;\n#ifdef REFLECTANCE\n\n\n\n\n\nsurfaceAlbedo=baseColor.rgb*(1.0-metallicRoughness.r);\n\nsurfaceReflectivityColor=mix(0.16*reflectance*reflectance,baseColor,metallicRoughness.r);\n#else\n\n\n\nconst vec3 DefaultSpecularReflectanceDielectric=vec3(0.04,0.04,0.04);\n\nsurfaceAlbedo=mix(baseColor.rgb*(1.0-DefaultSpecularReflectanceDielectric.r),vec3(0.,0.,0.),metallicRoughness.r);\n\nsurfaceReflectivityColor=mix(DefaultSpecularReflectanceDielectric,baseColor,metallicRoughness.r);\n#endif\n#else\n#ifdef REFLECTIVITY\nvec4 surfaceReflectivityColorMap=texture2D(reflectivitySampler,vReflectivityUV+uvOffset);\nsurfaceReflectivityColor*=toLinearSpace(surfaceReflectivityColorMap.rgb);\nsurfaceReflectivityColor*=vReflectivityInfos.y;\n#ifdef MICROSURFACEFROMREFLECTIVITYMAP\nmicroSurface*=surfaceReflectivityColorMap.a;\nmicroSurface*=vReflectivityInfos.z;\n#else\n#ifdef MICROSURFACEAUTOMATIC\nmicroSurface*=computeDefaultMicroSurface(microSurface,surfaceReflectivityColor);\n#endif\n#ifdef MICROSURFACEMAP\nvec4 microSurfaceTexel=texture2D(microSurfaceSampler,vMicroSurfaceSamplerUV+uvOffset)*vMicroSurfaceSamplerInfos.y;\nmicroSurface*=microSurfaceTexel.r;\n#endif\n#define CUSTOM_FRAGMENT_UPDATE_MICROSURFACE\n#endif\n#endif\n#endif\n\nmicroSurface=saturate(microSurface);\n\nfloat roughness=1.-microSurface;\n\n#ifdef ALPHAFRESNEL\n#if defined(ALPHATEST) || defined(ALPHABLEND)\n\n\n\nfloat opacityPerceptual=alpha;\n#ifdef LINEARALPHAFRESNEL\nfloat opacity0=opacityPerceptual;\n#else\nfloat opacity0=opacityPerceptual*opacityPerceptual;\n#endif\nfloat opacity90=fresnelGrazingReflectance(opacity0);\nvec3 normalForward=faceforward(normalW,-viewDirectionW,normalW);\n\nalpha=getReflectanceFromAnalyticalBRDFLookup_Jones(saturate(dot(viewDirectionW,normalForward)),vec3(opacity0),vec3(opacity90),sqrt(microSurface)).x;\n#ifdef ALPHATEST\nif (alpha<ALPHATESTVALUE)\ndiscard;\n#ifndef ALPHABLEND\n\nalpha=1.0;\n#endif\n#endif\n#endif\n#endif\n\nfloat NdotVUnclamped=dot(normalW,viewDirectionW);\n\nfloat NdotV=absEps(NdotVUnclamped);\nfloat alphaG=convertRoughnessToAverageSlope(roughness);\nvec2 AARoughnessFactors=getAARoughnessFactors(normalW.xyz);\n#ifdef SPECULARAA\n\nalphaG+=AARoughnessFactors.y;\n#endif\n#ifdef ANISOTROPIC\nfloat anisotropy=vAnisotropy.b;\nvec3 anisotropyDirection=vec3(vAnisotropy.xy,0.);\n#ifdef ANISOTROPIC_TEXTURE\nvec3 anisotropyMapData=texture2D(anisotropySampler,vAnisotropyUV+uvOffset).rgb*vAnisotropyInfos.y;\nanisotropy*=anisotropyMapData.b;\nanisotropyDirection.rg*=anisotropyMapData.rg*2.0-1.0;\n#endif\nmat3 anisoTBN=mat3(normalize(TBN[0]),normalize(TBN[1]),normalize(TBN[2]));\nvec3 anisotropicTangent=normalize(anisoTBN*anisotropyDirection);\nvec3 anisotropicBitangent=normalize(cross(anisoTBN[2],anisotropicTangent));\nvec3 anisotropicNormal=getAnisotropicBentNormals(anisotropicTangent,anisotropicBitangent,normalW,viewDirectionW,anisotropy);\n#endif\n\n#ifdef SS_REFRACTION\nvec4 environmentRefraction=vec4(0.,0.,0.,0.);\n#ifdef ANISOTROPIC\nvec3 refractionVector=refract(-viewDirectionW,anisotropicNormal,vRefractionInfos.y);\n#else\nvec3 refractionVector=refract(-viewDirectionW,normalW,vRefractionInfos.y);\n#endif\n#ifdef SS_REFRACTIONMAP_OPPOSITEZ\nrefractionVector.z*=-1.0;\n#endif\n\n#ifdef SS_REFRACTIONMAP_3D\nrefractionVector.y=refractionVector.y*vRefractionInfos.w;\nvec3 refractionCoords=refractionVector;\nrefractionCoords=vec3(refractionMatrix*vec4(refractionCoords,0));\n#else\nvec3 vRefractionUVW=vec3(refractionMatrix*(view*vec4(vPositionW+refractionVector*vRefractionInfos.z,1.0)));\nvec2 refractionCoords=vRefractionUVW.xy/vRefractionUVW.z;\nrefractionCoords.y=1.0-refractionCoords.y;\n#endif\n#ifdef SS_LODINREFRACTIONALPHA\nfloat refractionLOD=getLodFromAlphaG(vRefractionMicrosurfaceInfos.x,alphaG,NdotVUnclamped);\n#else\nfloat refractionLOD=getLodFromAlphaG(vRefractionMicrosurfaceInfos.x,alphaG);\n#endif\n#ifdef LODBASEDMICROSFURACE\n\nrefractionLOD=refractionLOD*vRefractionMicrosurfaceInfos.y+vRefractionMicrosurfaceInfos.z;\n#ifdef SS_LODINREFRACTIONALPHA\n\n\n\n\n\n\n\n\n\nfloat automaticRefractionLOD=UNPACK_LOD(sampleRefraction(refractionSampler,refractionCoords).a);\nfloat requestedRefractionLOD=max(automaticRefractionLOD,refractionLOD);\n#else\nfloat requestedRefractionLOD=refractionLOD;\n#endif\nenvironmentRefraction=sampleRefractionLod(refractionSampler,refractionCoords,requestedRefractionLOD);\n#else\nfloat lodRefractionNormalized=saturate(refractionLOD/log2(vRefractionMicrosurfaceInfos.x));\nfloat lodRefractionNormalizedDoubled=lodRefractionNormalized*2.0;\nvec4 environmentRefractionMid=sampleRefraction(refractionSampler,refractionCoords);\nif(lodRefractionNormalizedDoubled<1.0){\nenvironmentRefraction=mix(\nsampleRefraction(refractionSamplerHigh,refractionCoords),\nenvironmentRefractionMid,\nlodRefractionNormalizedDoubled\n);\n}else{\nenvironmentRefraction=mix(\nenvironmentRefractionMid,\nsampleRefraction(refractionSamplerLow,refractionCoords),\nlodRefractionNormalizedDoubled-1.0\n);\n}\n#endif\n#ifdef SS_RGBDREFRACTION\nenvironmentRefraction.rgb=fromRGBD(environmentRefraction);\n#endif\n#ifdef SS_GAMMAREFRACTION\nenvironmentRefraction.rgb=toLinearSpace(environmentRefraction.rgb);\n#endif\n\nenvironmentRefraction.rgb*=vRefractionInfos.x;\n#endif\n\n#ifdef REFLECTION\nvec4 environmentRadiance=vec4(0.,0.,0.,0.);\nvec3 environmentIrradiance=vec3(0.,0.,0.);\n#ifdef ANISOTROPIC\nvec3 reflectionVector=computeReflectionCoords(vec4(vPositionW,1.0),anisotropicNormal);\n#else\nvec3 reflectionVector=computeReflectionCoords(vec4(vPositionW,1.0),normalW);\n#endif\n#ifdef REFLECTIONMAP_OPPOSITEZ\nreflectionVector.z*=-1.0;\n#endif\n\n#ifdef REFLECTIONMAP_3D\nvec3 reflectionCoords=reflectionVector;\n#else\nvec2 reflectionCoords=reflectionVector.xy;\n#ifdef REFLECTIONMAP_PROJECTION\nreflectionCoords/=reflectionVector.z;\n#endif\nreflectionCoords.y=1.0-reflectionCoords.y;\n#endif\n#if defined(LODINREFLECTIONALPHA) && !defined(REFLECTIONMAP_SKYBOX)\nfloat reflectionLOD=getLodFromAlphaG(vReflectionMicrosurfaceInfos.x,alphaG,NdotVUnclamped);\n#else\nfloat reflectionLOD=getLodFromAlphaG(vReflectionMicrosurfaceInfos.x,alphaG);\n#endif\n#ifdef LODBASEDMICROSFURACE\n\nreflectionLOD=reflectionLOD*vReflectionMicrosurfaceInfos.y+vReflectionMicrosurfaceInfos.z;\n#ifdef LODINREFLECTIONALPHA\n\n\n\n\n\n\n\n\n\nfloat automaticReflectionLOD=UNPACK_LOD(sampleReflection(reflectionSampler,reflectionCoords).a);\nfloat requestedReflectionLOD=max(automaticReflectionLOD,reflectionLOD);\n#else\nfloat requestedReflectionLOD=reflectionLOD;\n#endif\nenvironmentRadiance=sampleReflectionLod(reflectionSampler,reflectionCoords,requestedReflectionLOD);\n#else\nfloat lodReflectionNormalized=saturate(reflectionLOD/log2(vReflectionMicrosurfaceInfos.x));\nfloat lodReflectionNormalizedDoubled=lodReflectionNormalized*2.0;\nvec4 environmentSpecularMid=sampleReflection(reflectionSampler,reflectionCoords);\nif(lodReflectionNormalizedDoubled<1.0){\nenvironmentRadiance=mix(\nsampleReflection(reflectionSamplerHigh,reflectionCoords),\nenvironmentSpecularMid,\nlodReflectionNormalizedDoubled\n);\n}else{\nenvironmentRadiance=mix(\nenvironmentSpecularMid,\nsampleReflection(reflectionSamplerLow,reflectionCoords),\nlodReflectionNormalizedDoubled-1.0\n);\n}\n#endif\n#ifdef RGBDREFLECTION\nenvironmentRadiance.rgb=fromRGBD(environmentRadiance);\n#endif\n#ifdef GAMMAREFLECTION\nenvironmentRadiance.rgb=toLinearSpace(environmentRadiance.rgb);\n#endif\n\n#ifdef USESPHERICALFROMREFLECTIONMAP\n#if defined(NORMAL) && defined(USESPHERICALINVERTEX)\nenvironmentIrradiance=vEnvironmentIrradiance;\n#else\n#ifdef ANISOTROPIC\nvec3 irradianceVector=vec3(reflectionMatrix*vec4(anisotropicNormal,0)).xyz;\n#else\nvec3 irradianceVector=vec3(reflectionMatrix*vec4(normalW,0)).xyz;\n#endif\n#ifdef REFLECTIONMAP_OPPOSITEZ\nirradianceVector.z*=-1.0;\n#endif\nenvironmentIrradiance=computeEnvironmentIrradiance(irradianceVector);\n#endif\n#endif\n\nenvironmentRadiance.rgb*=vReflectionInfos.x;\nenvironmentRadiance.rgb*=vReflectionColor.rgb;\nenvironmentIrradiance*=vReflectionColor.rgb;\n#endif\n\nfloat reflectance=max(max(surfaceReflectivityColor.r,surfaceReflectivityColor.g),surfaceReflectivityColor.b);\nfloat reflectance90=fresnelGrazingReflectance(reflectance);\nvec3 specularEnvironmentR0=surfaceReflectivityColor.rgb;\nvec3 specularEnvironmentR90=vec3(1.0,1.0,1.0)*reflectance90;\n\n#ifdef SHEEN\nfloat sheenIntensity=vSheenColor.a;\n#ifdef SHEEN_TEXTURE\nvec4 sheenMapData=texture2D(sheenSampler,vSheenUV+uvOffset)*vSheenInfos.y;\nsheenIntensity*=sheenMapData.a;\n#endif\n#ifdef SHEEN_LINKWITHALBEDO\nfloat sheenFactor=pow5(1.0-sheenIntensity);\nvec3 sheenColor=baseColor.rgb*(1.0-sheenFactor);\nfloat sheenRoughness=sheenIntensity;\n\nsurfaceAlbedo.rgb*=sheenFactor;\n#else\nvec3 sheenColor=vSheenColor.rgb;\n#ifdef SHEEN_TEXTURE\nsheenColor.rgb*=toLinearSpace(sheenMapData.rgb);\n#endif\nfloat sheenRoughness=roughness;\n\nsheenIntensity*=(1.-reflectance);\n\nsheenColor*=sheenIntensity;\n#endif\n\n#if defined(REFLECTION)\nfloat sheenAlphaG=convertRoughnessToAverageSlope(sheenRoughness);\n#ifdef SPECULARAA\n\nsheenAlphaG+=AARoughnessFactors.y;\n#endif\nvec4 environmentSheenRadiance=vec4(0.,0.,0.,0.);\n\n#if defined(LODINREFLECTIONALPHA) && !defined(REFLECTIONMAP_SKYBOX)\nfloat sheenReflectionLOD=getLodFromAlphaG(vReflectionMicrosurfaceInfos.x,sheenAlphaG,NdotVUnclamped);\n#else\nfloat sheenReflectionLOD=getLodFromAlphaG(vReflectionMicrosurfaceInfos.x,sheenAlphaG);\n#endif\n#ifdef LODBASEDMICROSFURACE\n\nsheenReflectionLOD=sheenReflectionLOD*vReflectionMicrosurfaceInfos.y+vReflectionMicrosurfaceInfos.z;\nenvironmentSheenRadiance=sampleReflectionLod(reflectionSampler,reflectionCoords,sheenReflectionLOD);\n#else\nfloat lodSheenReflectionNormalized=saturate(sheenReflectionLOD/log2(vReflectionMicrosurfaceInfos.x));\nfloat lodSheenReflectionNormalizedDoubled=lodSheenReflectionNormalized*2.0;\nvec4 environmentSheenMid=sampleReflection(reflectionSampler,reflectionCoords);\nif(lodSheenReflectionNormalizedDoubled<1.0){\nenvironmentSheenRadiance=mix(\nsampleReflection(reflectionSamplerHigh,reflectionCoords),\nenvironmentSheenMid,\nlodSheenReflectionNormalizedDoubled\n);\n}else{\nenvironmentSheenRadiance=mix(\nenvironmentSheenMid,\nsampleReflection(reflectionSamplerLow,reflectionCoords),\nlodSheenReflectionNormalizedDoubled-1.0\n);\n}\n#endif\n#ifdef RGBDREFLECTION\nenvironmentSheenRadiance.rgb=fromRGBD(environmentSheenRadiance);\n#endif\n#ifdef GAMMAREFLECTION\nenvironmentSheenRadiance.rgb=toLinearSpace(environmentSheenRadiance.rgb);\n#endif\n\nenvironmentSheenRadiance.rgb*=vReflectionInfos.x;\nenvironmentSheenRadiance.rgb*=vReflectionColor.rgb;\n#endif\n#endif\n\n#ifdef CLEARCOAT\n\nfloat clearCoatIntensity=vClearCoatParams.x;\nfloat clearCoatRoughness=vClearCoatParams.y;\n#ifdef CLEARCOAT_TEXTURE\nvec2 clearCoatMapData=texture2D(clearCoatSampler,vClearCoatUV+uvOffset).rg*vClearCoatInfos.y;\nclearCoatIntensity*=clearCoatMapData.x;\nclearCoatRoughness*=clearCoatMapData.y;\n#endif\n#ifdef CLEARCOAT_TINT\nvec3 clearCoatColor=vClearCoatTintParams.rgb;\nfloat clearCoatThickness=vClearCoatTintParams.a;\n#ifdef CLEARCOAT_TINT_TEXTURE\nvec4 clearCoatTintMapData=texture2D(clearCoatTintSampler,vClearCoatTintUV+uvOffset);\nclearCoatColor*=toLinearSpace(clearCoatTintMapData.rgb);\nclearCoatThickness*=clearCoatTintMapData.a;\n#endif\nclearCoatColor=computeColorAtDistanceInMedia(clearCoatColor,clearCoatColorAtDistance);\n#endif\n\n\n\n\nvec3 specularEnvironmentR0Updated=getR0RemappedForClearCoat(specularEnvironmentR0);\nspecularEnvironmentR0=mix(specularEnvironmentR0,specularEnvironmentR0Updated,clearCoatIntensity);\n#ifdef CLEARCOAT_BUMP\n#ifdef NORMALXYSCALE\nfloat clearCoatNormalScale=1.0;\n#else\nfloat clearCoatNormalScale=vClearCoatBumpInfos.y;\n#endif\n#if defined(TANGENT) && defined(NORMAL)\nmat3 TBNClearCoat=vTBN;\n#else\nmat3 TBNClearCoat=cotangent_frame(clearCoatNormalW*clearCoatNormalScale,vPositionW,vClearCoatBumpUV,vClearCoatTangentSpaceParams);\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\nclearCoatNormalW=normalize(texture2D(clearCoatBumpSampler,vClearCoatBumpUV+uvOffset).xyz*2.0-1.0);\nclearCoatNormalW=normalize(mat3(normalMatrix)*clearCoatNormalW);\n#else\nclearCoatNormalW=perturbNormal(TBN,vClearCoatBumpUV+uvOffset,clearCoatBumpSampler,vClearCoatBumpInfos.y);\n#endif\n#endif\n#if defined(FORCENORMALFORWARD) && defined(NORMAL)\nclearCoatNormalW*=sign(dot(clearCoatNormalW,faceNormal));\n#endif\n#if defined(TWOSIDEDLIGHTING) && defined(NORMAL)\nclearCoatNormalW=gl_FrontFacing ? clearCoatNormalW : -clearCoatNormalW;\n#endif\n\nvec2 clearCoatAARoughnessFactors=getAARoughnessFactors(clearCoatNormalW.xyz);\n\nfloat clearCoatNdotVUnclamped=dot(clearCoatNormalW,viewDirectionW);\n\nfloat clearCoatNdotV=absEps(clearCoatNdotVUnclamped);\n\n#if defined(REFLECTION)\nfloat clearCoatAlphaG=convertRoughnessToAverageSlope(clearCoatRoughness);\n#ifdef SPECULARAA\n\nclearCoatAlphaG+=clearCoatAARoughnessFactors.y;\n#endif\nvec4 environmentClearCoatRadiance=vec4(0.,0.,0.,0.);\nvec3 clearCoatReflectionVector=computeReflectionCoords(vec4(vPositionW,1.0),clearCoatNormalW);\n#ifdef REFLECTIONMAP_OPPOSITEZ\nclearCoatReflectionVector.z*=-1.0;\n#endif\n\n#ifdef REFLECTIONMAP_3D\nvec3 clearCoatReflectionCoords=clearCoatReflectionVector;\n#else\nvec2 clearCoatReflectionCoords=clearCoatReflectionVector.xy;\n#ifdef REFLECTIONMAP_PROJECTION\nclearCoatReflectionCoords/=clearCoatReflectionVector.z;\n#endif\nclearCoatReflectionCoords.y=1.0-clearCoatReflectionCoords.y;\n#endif\n#if defined(LODINREFLECTIONALPHA) && !defined(REFLECTIONMAP_SKYBOX)\nfloat clearCoatReflectionLOD=getLodFromAlphaG(vReflectionMicrosurfaceInfos.x,clearCoatAlphaG,clearCoatNdotVUnclamped);\n#else\nfloat clearCoatReflectionLOD=getLodFromAlphaG(vReflectionMicrosurfaceInfos.x,clearCoatAlphaG);\n#endif\n#ifdef LODBASEDMICROSFURACE\n\nclearCoatReflectionLOD=clearCoatReflectionLOD*vReflectionMicrosurfaceInfos.y+vReflectionMicrosurfaceInfos.z;\nfloat requestedClearCoatReflectionLOD=clearCoatReflectionLOD;\nenvironmentClearCoatRadiance=sampleReflectionLod(reflectionSampler,clearCoatReflectionCoords,requestedClearCoatReflectionLOD);\n#else\nfloat lodClearCoatReflectionNormalized=saturate(clearCoatReflectionLOD/log2(vReflectionMicrosurfaceInfos.x));\nfloat lodClearCoatReflectionNormalizedDoubled=lodClearCoatReflectionNormalized*2.0;\nvec4 environmentClearCoatMid=sampleReflection(reflectionSampler,reflectionCoords);\nif(lodClearCoatReflectionNormalizedDoubled<1.0){\nenvironmentClearCoatRadiance=mix(\nsampleReflection(reflectionSamplerHigh,clearCoatReflectionCoords),\nenvironmentClearCoatMid,\nlodClearCoatReflectionNormalizedDoubled\n);\n}else{\nenvironmentClearCoatRadiance=mix(\nenvironmentClearCoatMid,\nsampleReflection(reflectionSamplerLow,clearCoatReflectionCoords),\nlodClearCoatReflectionNormalizedDoubled-1.0\n);\n}\n#endif\n#ifdef RGBDREFLECTION\nenvironmentClearCoatRadiance.rgb=fromRGBD(environmentClearCoatRadiance);\n#endif\n#ifdef GAMMAREFLECTION\nenvironmentClearCoatRadiance.rgb=toLinearSpace(environmentClearCoatRadiance.rgb);\n#endif\n#ifdef CLEARCOAT_TINT\n\nvec3 clearCoatVRefract=-refract(vPositionW,clearCoatNormalW,vClearCoatRefractionParams.y);\n\nfloat clearCoatNdotVRefract=absEps(dot(clearCoatNormalW,clearCoatVRefract));\nvec3 absorption=vec3(0.);\n#endif\n\nenvironmentClearCoatRadiance.rgb*=vReflectionInfos.x;\nenvironmentClearCoatRadiance.rgb*=vReflectionColor.rgb;\n#endif\n#endif\n\n#if defined(ENVIRONMENTBRDF)\n\nvec3 environmentBrdf=getBRDFLookup(NdotV,roughness,environmentBrdfSampler);\n#ifdef MS_BRDF_ENERGY_CONSERVATION\nvec3 energyConservationFactor=getEnergyConservationFactor(specularEnvironmentR0,environmentBrdf);\n#endif\n#endif\n\n#ifdef SUBSURFACE\n#ifdef SS_REFRACTION\nfloat refractionIntensity=vSubSurfaceIntensity.x;\n#ifdef SS_LINKREFRACTIONTOTRANSPARENCY\nrefractionIntensity*=(1.0-alpha);\n\nalpha=1.0;\n#endif\n#endif\n#ifdef SS_TRANSLUCENCY\nfloat translucencyIntensity=vSubSurfaceIntensity.y;\n#endif\n#ifdef SS_SCATTERING\nfloat scatteringIntensity=vSubSurfaceIntensity.z;\n#endif\n#ifdef SS_THICKNESSANDMASK_TEXTURE\nvec4 thicknessMap=texture2D(thicknessSampler,vThicknessUV+uvOffset);\nfloat thickness=thicknessMap.r*vThicknessParam.y+vThicknessParam.x;\n#ifdef SS_MASK_FROM_THICKNESS_TEXTURE\n#ifdef SS_REFRACTION\nrefractionIntensity*=thicknessMap.g;\n#endif\n#ifdef SS_TRANSLUCENCY\ntranslucencyIntensity*=thicknessMap.b;\n#endif\n#ifdef SS_SCATTERING\nscatteringIntensity*=thicknessMap.a;\n#endif\n#endif\n#else\nfloat thickness=vThicknessParam.y;\n#endif\n#ifdef SS_TRANSLUCENCY\nthickness=maxEps(thickness);\nvec3 transmittance=transmittanceBRDF_Burley(vTintColor.rgb,vDiffusionDistance,thickness);\ntransmittance*=translucencyIntensity;\n#endif\n#endif\n\n\nvec3 diffuseBase=vec3(0.,0.,0.);\n#ifdef SPECULARTERM\nvec3 specularBase=vec3(0.,0.,0.);\n#endif\n#ifdef CLEARCOAT\nvec3 clearCoatBase=vec3(0.,0.,0.);\n#endif\n#ifdef SHEEN\nvec3 sheenBase=vec3(0.,0.,0.);\n#endif\n#ifdef LIGHTMAP\nvec3 lightmapColor=texture2D(lightmapSampler,vLightmapUV+uvOffset).rgb;\n#ifdef GAMMALIGHTMAP\nlightmapColor=toLinearSpace(lightmapColor);\n#endif\nlightmapColor*=vLightmapInfos.y;\n#endif\n\npreLightingInfo preInfo;\nlightingInfo info;\nfloat shadow=1.;\n#include<lightFragment>[0..maxSimultaneousLights]\n\n#if defined(ENVIRONMENTBRDF) && !defined(REFLECTIONMAP_SKYBOX)\nvec3 specularEnvironmentReflectance=getReflectanceFromBRDFLookup(specularEnvironmentR0,environmentBrdf);\n#ifdef RADIANCEOCCLUSION\n#ifdef AMBIENTINGRAYSCALE\nfloat ambientMonochrome=ambientOcclusionColor.r;\n#else\nfloat ambientMonochrome=getLuminance(ambientOcclusionColor);\n#endif\nfloat seo=environmentRadianceOcclusion(ambientMonochrome,NdotVUnclamped);\nspecularEnvironmentReflectance*=seo;\n#endif\n#ifdef HORIZONOCCLUSION\n#ifdef BUMP\n#ifdef REFLECTIONMAP_3D\nfloat eho=environmentHorizonOcclusion(-viewDirectionW,normalW);\nspecularEnvironmentReflectance*=eho;\n#endif\n#endif\n#endif\n#else\n\nvec3 specularEnvironmentReflectance=getReflectanceFromAnalyticalBRDFLookup_Jones(NdotV,specularEnvironmentR0,specularEnvironmentR90,sqrt(microSurface));\n#endif\n\n#if defined(SHEEN) && defined(REFLECTION)\nvec3 sheenEnvironmentReflectance=getSheenReflectanceFromBRDFLookup(sheenColor,environmentBrdf);\n#ifdef RADIANCEOCCLUSION\nsheenEnvironmentReflectance*=seo;\n#endif\n#ifdef HORIZONOCCLUSION\n#ifdef BUMP\n#ifdef REFLECTIONMAP_3D\nsheenEnvironmentReflectance*=eho;\n#endif\n#endif\n#endif\n#endif\n\n#ifdef CLEARCOAT\n#if defined(ENVIRONMENTBRDF) && !defined(REFLECTIONMAP_SKYBOX)\n\nvec3 environmentClearCoatBrdf=getBRDFLookup(clearCoatNdotV,clearCoatRoughness,environmentBrdfSampler);\nvec3 clearCoatEnvironmentReflectance=getReflectanceFromBRDFLookup(vec3(vClearCoatRefractionParams.x),environmentClearCoatBrdf);\n#ifdef RADIANCEOCCLUSION\nfloat clearCoatSeo=environmentRadianceOcclusion(ambientMonochrome,clearCoatNdotVUnclamped);\nclearCoatEnvironmentReflectance*=clearCoatSeo;\n#endif\n#ifdef HORIZONOCCLUSION\n#ifdef BUMP\n#ifdef REFLECTIONMAP_3D\nfloat clearCoatEho=environmentHorizonOcclusion(-viewDirectionW,clearCoatNormalW);\nclearCoatEnvironmentReflectance*=clearCoatEho;\n#endif\n#endif\n#endif\n#else\n\nvec3 clearCoatEnvironmentReflectance=getReflectanceFromAnalyticalBRDFLookup_Jones(clearCoatNdotV,vec3(1.),vec3(1.),sqrt(1.-clearCoatRoughness));\n#endif\nclearCoatEnvironmentReflectance*=clearCoatIntensity;\n#ifdef CLEARCOAT_TINT\n\nabsorption=computeClearCoatAbsorption(clearCoatNdotVRefract,clearCoatNdotVRefract,clearCoatColor,clearCoatThickness,clearCoatIntensity);\n#ifdef REFLECTION\nenvironmentIrradiance*=absorption;\n#endif\n#ifdef SHEEN\nsheenEnvironmentReflectance*=absorption;\n#endif\nspecularEnvironmentReflectance*=absorption;\n#endif\n\nfloat fresnelIBLClearCoat=fresnelSchlickGGX(clearCoatNdotV,vClearCoatRefractionParams.x,CLEARCOATREFLECTANCE90);\nfresnelIBLClearCoat*=clearCoatIntensity;\nfloat conservationFactor=(1.-fresnelIBLClearCoat);\n#ifdef REFLECTION\nenvironmentIrradiance*=conservationFactor;\n#endif\n#ifdef SHEEN\nsheenEnvironmentReflectance*=(conservationFactor*conservationFactor);\n#endif\nspecularEnvironmentReflectance*=(conservationFactor*conservationFactor);\n#endif\n\n#ifdef SS_REFRACTION\nvec3 refractionTransmittance=vec3(refractionIntensity);\n#ifdef SS_THICKNESSANDMASK_TEXTURE\nvec3 volumeAlbedo=computeColorAtDistanceInMedia(vTintColor.rgb,vTintColor.w);\n\n\n\n\n\nrefractionTransmittance*=cocaLambert(volumeAlbedo,thickness);\n#elif defined(SS_LINKREFRACTIONTOTRANSPARENCY)\n\nfloat maxChannel=max(max(surfaceAlbedo.r,surfaceAlbedo.g),surfaceAlbedo.b);\nvec3 volumeAlbedo=saturate(maxChannel*surfaceAlbedo);\n\nenvironmentRefraction.rgb*=volumeAlbedo;\n#else\n\nvec3 volumeAlbedo=computeColorAtDistanceInMedia(vTintColor.rgb,vTintColor.w);\nrefractionTransmittance*=cocaLambert(volumeAlbedo,vThicknessParam.y);\n#endif\n\nsurfaceAlbedo*=(1.-refractionIntensity);\n\nenvironmentIrradiance*=(1.-refractionIntensity);\n\nvec3 bounceSpecularEnvironmentReflectance=(2.0*specularEnvironmentReflectance)/(1.0+specularEnvironmentReflectance);\nspecularEnvironmentReflectance=mix(bounceSpecularEnvironmentReflectance,specularEnvironmentReflectance,refractionIntensity);\n\nrefractionTransmittance*=1.0-specularEnvironmentReflectance;\n#endif\n\n#if defined(REFLECTION) && defined(USESPHERICALFROMREFLECTIONMAP) && defined(SS_TRANSLUCENCY)\n#if defined(USESPHERICALINVERTEX)\nvec3 irradianceVector=vec3(reflectionMatrix*vec4(normalW,0)).xyz;\n#ifdef REFLECTIONMAP_OPPOSITEZ\nirradianceVector.z*=-1.0;\n#endif\n#endif\nvec3 refractionIrradiance=computeEnvironmentIrradiance(-irradianceVector);\nrefractionIrradiance*=transmittance;\n#endif\n\n\n\n#ifndef METALLICWORKFLOW\nsurfaceAlbedo.rgb=(1.-reflectance)*surfaceAlbedo.rgb;\n#endif\n\n#ifdef REFLECTION\nvec3 finalIrradiance=environmentIrradiance;\n#if defined(USESPHERICALFROMREFLECTIONMAP) && defined(SS_TRANSLUCENCY)\nfinalIrradiance+=refractionIrradiance;\n#endif\nfinalIrradiance*=surfaceAlbedo.rgb;\n#endif\n\n#ifdef SPECULARTERM\nvec3 finalSpecular=specularBase;\nfinalSpecular=max(finalSpecular,0.0);\n\nvec3 finalSpecularScaled=finalSpecular*vLightingIntensity.x*vLightingIntensity.w;\n#if defined(ENVIRONMENTBRDF) && defined(MS_BRDF_ENERGY_CONSERVATION)\nfinalSpecularScaled*=energyConservationFactor;\n#endif\n#endif\n\n#ifdef REFLECTION\nvec3 finalRadiance=environmentRadiance.rgb;\nfinalRadiance*=specularEnvironmentReflectance;\n\nvec3 finalRadianceScaled=finalRadiance*vLightingIntensity.z;\n#if defined(ENVIRONMENTBRDF) && defined(MS_BRDF_ENERGY_CONSERVATION)\nfinalRadianceScaled*=energyConservationFactor;\n#endif\n#endif\n\n#ifdef SS_REFRACTION\nvec3 finalRefraction=environmentRefraction.rgb;\nfinalRefraction*=refractionTransmittance;\n#endif\n\n#ifdef CLEARCOAT\nvec3 finalClearCoat=clearCoatBase;\nfinalClearCoat=max(finalClearCoat,0.0);\n\nvec3 finalClearCoatScaled=finalClearCoat*vLightingIntensity.x*vLightingIntensity.w;\n#if defined(ENVIRONMENTBRDF) && defined(MS_BRDF_ENERGY_CONSERVATION)\nfinalClearCoatScaled*=energyConservationFactor;\n#endif\n\n#ifdef REFLECTION\nvec3 finalClearCoatRadiance=environmentClearCoatRadiance.rgb;\nfinalClearCoatRadiance*=clearCoatEnvironmentReflectance;\n\nvec3 finalClearCoatRadianceScaled=finalClearCoatRadiance*vLightingIntensity.z;\n#endif\n#ifdef SS_REFRACTION\nfinalRefraction*=(conservationFactor*conservationFactor);\n#ifdef CLEARCOAT_TINT\nfinalRefraction*=absorption;\n#endif\n#endif\n#endif\n\n#ifdef SHEEN\nvec3 finalSheen=sheenBase*sheenColor;\nfinalSheen=max(finalSheen,0.0);\nvec3 finalSheenScaled=finalSheen*vLightingIntensity.x*vLightingIntensity.w;\n\n\n\n\n\n#ifdef REFLECTION\nvec3 finalSheenRadiance=environmentSheenRadiance.rgb;\nfinalSheenRadiance*=sheenEnvironmentReflectance;\n\nvec3 finalSheenRadianceScaled=finalSheenRadiance*vLightingIntensity.z;\n#endif\n#endif\n\n#ifdef ALPHABLEND\nfloat luminanceOverAlpha=0.0;\n#if defined(REFLECTION) && defined(RADIANCEOVERALPHA)\nluminanceOverAlpha+=getLuminance(finalRadianceScaled);\n#if defined(CLEARCOAT)\nluminanceOverAlpha+=getLuminance(finalClearCoatRadianceScaled);\n#endif\n#endif\n#if defined(SPECULARTERM) && defined(SPECULAROVERALPHA)\nluminanceOverAlpha+=getLuminance(finalSpecularScaled);\n#endif\n#if defined(CLEARCOAT) && defined(CLEARCOATOVERALPHA)\nluminanceOverAlpha+=getLuminance(finalClearCoatScaled);\n#endif\n#if defined(RADIANCEOVERALPHA) || defined(SPECULAROVERALPHA)\nalpha=saturate(alpha+luminanceOverAlpha*luminanceOverAlpha);\n#endif\n#endif\n#endif\n\n\nvec3 finalDiffuse=diffuseBase;\nfinalDiffuse*=surfaceAlbedo.rgb;\nfinalDiffuse=max(finalDiffuse,0.0);\n\nvec3 finalAmbient=vAmbientColor;\nfinalAmbient*=surfaceAlbedo.rgb;\n\nvec3 finalEmissive=vEmissiveColor;\n#ifdef EMISSIVE\nvec3 emissiveColorTex=texture2D(emissiveSampler,vEmissiveUV+uvOffset).rgb;\nfinalEmissive*=toLinearSpace(emissiveColorTex.rgb);\nfinalEmissive*=vEmissiveInfos.y;\n#endif\n\n#ifdef AMBIENT\nvec3 ambientOcclusionForDirectDiffuse=mix(vec3(1.),ambientOcclusionColor,vAmbientInfos.w);\n#else\nvec3 ambientOcclusionForDirectDiffuse=ambientOcclusionColor;\n#endif\n\n\n\nvec4 finalColor=vec4(\nfinalAmbient*ambientOcclusionColor +\nfinalDiffuse*ambientOcclusionForDirectDiffuse*vLightingIntensity.x +\n#ifndef UNLIT\n#ifdef REFLECTION\nfinalIrradiance*ambientOcclusionColor*vLightingIntensity.z +\n#endif\n#ifdef SPECULARTERM\n\n\nfinalSpecularScaled +\n#endif\n#ifdef CLEARCOAT\n\n\nfinalClearCoatScaled +\n#endif\n#ifdef SHEEN\n\n\nfinalSheenScaled +\n#endif\n#ifdef REFLECTION\n\n\nfinalRadianceScaled +\n#ifdef CLEARCOAT\n\n\nfinalClearCoatRadianceScaled +\n#endif\n#ifdef SHEEN\n\n\nfinalSheenRadianceScaled +\n#endif\n#endif\n#ifdef SS_REFRACTION\nfinalRefraction*vLightingIntensity.z +\n#endif\n#endif\nfinalEmissive*vLightingIntensity.y,\nalpha);\n\n#ifdef LIGHTMAP\n#ifndef LIGHTMAPEXCLUDED\n#ifdef USELIGHTMAPASSHADOWMAP\nfinalColor.rgb*=lightmapColor;\n#else\nfinalColor.rgb+=lightmapColor;\n#endif\n#endif\n#endif\n#define CUSTOM_FRAGMENT_BEFORE_FOG\n\nfinalColor=max(finalColor,0.0);\n#include<logDepthFragment>\n#include<fogFragment>(color,finalColor)\n#ifdef IMAGEPROCESSINGPOSTPROCESS\n\n\nfinalColor.rgb=clamp(finalColor.rgb,0.,30.0);\n#else\n\nfinalColor=applyImageProcessing(finalColor);\n#endif\nfinalColor.a*=visibility;\n#ifdef PREMULTIPLYALPHA\n\nfinalColor.rgb*=finalColor.a;\n#endif\n#define CUSTOM_FRAGMENT_BEFORE_FRAGCOLOR\ngl_FragColor=finalColor;\n#include<pbrDebug>\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var pbrPixelShader = { name, shader };\n"},"lineCount":null}},"error":null,"hash":"5b7d7d261ecdd3e9f06869a709030f8a","cacheData":{"env":{}}}