{"id":"LTpE","dependencies":[{"name":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/default.fragment.js.map","includedInParent":true,"mtime":1556745103000},{"name":"/Users/hujy/GT/Spring20/3DU/3DPainter/package.json","includedInParent":true,"mtime":1588539929318},{"name":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/package.json","includedInParent":true,"mtime":1588537596306},{"name":"../Materials/effect","loc":{"line":1,"column":23},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/default.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Materials/effect.js"},{"name":"./ShadersInclude/defaultFragmentDeclaration","loc":{"line":2,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/default.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/defaultFragmentDeclaration.js"},{"name":"./ShadersInclude/defaultUboDeclaration","loc":{"line":3,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/default.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/defaultUboDeclaration.js"},{"name":"./ShadersInclude/helperFunctions","loc":{"line":4,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/default.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/helperFunctions.js"},{"name":"./ShadersInclude/lightFragmentDeclaration","loc":{"line":5,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/default.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/lightFragmentDeclaration.js"},{"name":"./ShadersInclude/lightUboDeclaration","loc":{"line":6,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/default.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/lightUboDeclaration.js"},{"name":"./ShadersInclude/lightsFragmentFunctions","loc":{"line":7,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/default.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/lightsFragmentFunctions.js"},{"name":"./ShadersInclude/shadowsFragmentFunctions","loc":{"line":8,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/default.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/shadowsFragmentFunctions.js"},{"name":"./ShadersInclude/fresnelFunction","loc":{"line":9,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/default.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/fresnelFunction.js"},{"name":"./ShadersInclude/reflectionFunction","loc":{"line":10,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/default.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/reflectionFunction.js"},{"name":"./ShadersInclude/imageProcessingDeclaration","loc":{"line":11,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/default.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/imageProcessingDeclaration.js"},{"name":"./ShadersInclude/imageProcessingFunctions","loc":{"line":12,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/default.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/imageProcessingFunctions.js"},{"name":"./ShadersInclude/bumpFragmentFunctions","loc":{"line":13,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/default.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/bumpFragmentFunctions.js"},{"name":"./ShadersInclude/clipPlaneFragmentDeclaration","loc":{"line":14,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/default.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/clipPlaneFragmentDeclaration.js"},{"name":"./ShadersInclude/logDepthDeclaration","loc":{"line":15,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/default.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/logDepthDeclaration.js"},{"name":"./ShadersInclude/fogFragmentDeclaration","loc":{"line":16,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/default.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/fogFragmentDeclaration.js"},{"name":"./ShadersInclude/clipPlaneFragment","loc":{"line":17,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/default.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/clipPlaneFragment.js"},{"name":"./ShadersInclude/bumpFragment","loc":{"line":18,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/default.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/bumpFragment.js"},{"name":"./ShadersInclude/depthPrePass","loc":{"line":19,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/default.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/depthPrePass.js"},{"name":"./ShadersInclude/lightFragment","loc":{"line":20,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/default.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/lightFragment.js"},{"name":"./ShadersInclude/logDepthFragment","loc":{"line":21,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/default.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/logDepthFragment.js"},{"name":"./ShadersInclude/fogFragment","loc":{"line":22,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/default.fragment.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/fogFragment.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.defaultPixelShader=void 0;var e=require(\"../Materials/effect\");require(\"./ShadersInclude/defaultFragmentDeclaration\"),require(\"./ShadersInclude/defaultUboDeclaration\"),require(\"./ShadersInclude/helperFunctions\"),require(\"./ShadersInclude/lightFragmentDeclaration\"),require(\"./ShadersInclude/lightUboDeclaration\"),require(\"./ShadersInclude/lightsFragmentFunctions\"),require(\"./ShadersInclude/shadowsFragmentFunctions\"),require(\"./ShadersInclude/fresnelFunction\"),require(\"./ShadersInclude/reflectionFunction\"),require(\"./ShadersInclude/imageProcessingDeclaration\"),require(\"./ShadersInclude/imageProcessingFunctions\"),require(\"./ShadersInclude/bumpFragmentFunctions\"),require(\"./ShadersInclude/clipPlaneFragmentDeclaration\"),require(\"./ShadersInclude/logDepthDeclaration\"),require(\"./ShadersInclude/fogFragmentDeclaration\"),require(\"./ShadersInclude/clipPlaneFragment\"),require(\"./ShadersInclude/bumpFragment\"),require(\"./ShadersInclude/depthPrePass\"),require(\"./ShadersInclude/lightFragment\"),require(\"./ShadersInclude/logDepthFragment\"),require(\"./ShadersInclude/fogFragment\");var n=\"defaultPixelShader\",i=\"#include<__decl__defaultFragment>\\n#if defined(BUMP) || !defined(NORMAL)\\n#extension GL_OES_standard_derivatives : enable\\n#endif\\n#define CUSTOM_FRAGMENT_BEGIN\\n#ifdef LOGARITHMICDEPTH\\n#extension GL_EXT_frag_depth : enable\\n#endif\\n\\n#define RECIPROCAL_PI2 0.15915494\\nuniform vec3 vEyePosition;\\nuniform vec3 vAmbientColor;\\n\\nvarying vec3 vPositionW;\\n#ifdef NORMAL\\nvarying vec3 vNormalW;\\n#endif\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n#ifdef MAINUV1\\nvarying vec2 vMainUV1;\\n#endif\\n#ifdef MAINUV2\\nvarying vec2 vMainUV2;\\n#endif\\n\\n#include<helperFunctions>\\n\\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\\n#include<lightsFragmentFunctions>\\n#include<shadowsFragmentFunctions>\\n\\n#ifdef DIFFUSE\\n#if DIFFUSEDIRECTUV == 1\\n#define vDiffuseUV vMainUV1\\n#elif DIFFUSEDIRECTUV == 2\\n#define vDiffuseUV vMainUV2\\n#else\\nvarying vec2 vDiffuseUV;\\n#endif\\nuniform sampler2D diffuseSampler;\\n#endif\\n#ifdef AMBIENT\\n#if AMBIENTDIRECTUV == 1\\n#define vAmbientUV vMainUV1\\n#elif AMBIENTDIRECTUV == 2\\n#define vAmbientUV vMainUV2\\n#else\\nvarying vec2 vAmbientUV;\\n#endif\\nuniform sampler2D ambientSampler;\\n#endif\\n#ifdef OPACITY\\n#if OPACITYDIRECTUV == 1\\n#define vOpacityUV vMainUV1\\n#elif OPACITYDIRECTUV == 2\\n#define vOpacityUV vMainUV2\\n#else\\nvarying vec2 vOpacityUV;\\n#endif\\nuniform sampler2D opacitySampler;\\n#endif\\n#ifdef EMISSIVE\\n#if EMISSIVEDIRECTUV == 1\\n#define vEmissiveUV vMainUV1\\n#elif EMISSIVEDIRECTUV == 2\\n#define vEmissiveUV vMainUV2\\n#else\\nvarying vec2 vEmissiveUV;\\n#endif\\nuniform sampler2D emissiveSampler;\\n#endif\\n#ifdef LIGHTMAP\\n#if LIGHTMAPDIRECTUV == 1\\n#define vLightmapUV vMainUV1\\n#elif LIGHTMAPDIRECTUV == 2\\n#define vLightmapUV vMainUV2\\n#else\\nvarying vec2 vLightmapUV;\\n#endif\\nuniform sampler2D lightmapSampler;\\n#endif\\n#ifdef REFRACTION\\n#ifdef REFRACTIONMAP_3D\\nuniform samplerCube refractionCubeSampler;\\n#else\\nuniform sampler2D refraction2DSampler;\\n#endif\\n#endif\\n#if defined(SPECULAR) && defined(SPECULARTERM)\\n#if SPECULARDIRECTUV == 1\\n#define vSpecularUV vMainUV1\\n#elif SPECULARDIRECTUV == 2\\n#define vSpecularUV vMainUV2\\n#else\\nvarying vec2 vSpecularUV;\\n#endif\\nuniform sampler2D specularSampler;\\n#endif\\n#ifdef ALPHATEST\\nuniform float alphaCutOff;\\n#endif\\n\\n#include<fresnelFunction>\\n\\n#ifdef REFLECTION\\n#ifdef REFLECTIONMAP_3D\\nuniform samplerCube reflectionCubeSampler;\\n#else\\nuniform sampler2D reflection2DSampler;\\n#endif\\n#ifdef REFLECTIONMAP_SKYBOX\\nvarying vec3 vPositionUVW;\\n#else\\n#if defined(REFLECTIONMAP_EQUIRECTANGULAR_FIXED) || defined(REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED)\\nvarying vec3 vDirectionW;\\n#endif\\n#endif\\n#include<reflectionFunction>\\n#endif\\n#include<imageProcessingDeclaration>\\n#include<imageProcessingFunctions>\\n#include<bumpFragmentFunctions>\\n#include<clipPlaneFragmentDeclaration>\\n#include<logDepthDeclaration>\\n#include<fogFragmentDeclaration>\\n#define CUSTOM_FRAGMENT_DEFINITIONS\\nvoid main(void) {\\n#define CUSTOM_FRAGMENT_MAIN_BEGIN\\n#include<clipPlaneFragment>\\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\\n\\nvec4 baseColor=vec4(1.,1.,1.,1.);\\nvec3 diffuseColor=vDiffuseColor.rgb;\\n\\nfloat alpha=vDiffuseColor.a;\\n\\n#ifdef NORMAL\\nvec3 normalW=normalize(vNormalW);\\n#else\\nvec3 normalW=normalize(-cross(dFdx(vPositionW),dFdy(vPositionW)));\\n#endif\\n#include<bumpFragment>\\n#ifdef TWOSIDEDLIGHTING\\nnormalW=gl_FrontFacing ? normalW : -normalW;\\n#endif\\n#ifdef DIFFUSE\\nbaseColor=texture2D(diffuseSampler,vDiffuseUV+uvOffset);\\n#ifdef ALPHATEST\\nif (baseColor.a<alphaCutOff)\\ndiscard;\\n#endif\\n#ifdef ALPHAFROMDIFFUSE\\nalpha*=baseColor.a;\\n#endif\\n#define CUSTOM_FRAGMENT_UPDATE_ALPHA\\nbaseColor.rgb*=vDiffuseInfos.y;\\n#endif\\n#include<depthPrePass>\\n#ifdef VERTEXCOLOR\\nbaseColor.rgb*=vColor.rgb;\\n#endif\\n#define CUSTOM_FRAGMENT_UPDATE_DIFFUSE\\n\\nvec3 baseAmbientColor=vec3(1.,1.,1.);\\n#ifdef AMBIENT\\nbaseAmbientColor=texture2D(ambientSampler,vAmbientUV+uvOffset).rgb*vAmbientInfos.y;\\n#endif\\n#define CUSTOM_FRAGMENT_BEFORE_LIGHTS\\n\\n#ifdef SPECULARTERM\\nfloat glossiness=vSpecularColor.a;\\nvec3 specularColor=vSpecularColor.rgb;\\n#ifdef SPECULAR\\nvec4 specularMapColor=texture2D(specularSampler,vSpecularUV+uvOffset);\\nspecularColor=specularMapColor.rgb;\\n#ifdef GLOSSINESS\\nglossiness=glossiness*specularMapColor.a;\\n#endif\\n#endif\\n#else\\nfloat glossiness=0.;\\n#endif\\n\\nvec3 diffuseBase=vec3(0.,0.,0.);\\nlightingInfo info;\\n#ifdef SPECULARTERM\\nvec3 specularBase=vec3(0.,0.,0.);\\n#endif\\nfloat shadow=1.;\\n#ifdef LIGHTMAP\\nvec3 lightmapColor=texture2D(lightmapSampler,vLightmapUV+uvOffset).rgb*vLightmapInfos.y;\\n#endif\\n#include<lightFragment>[0..maxSimultaneousLights]\\n\\nvec3 refractionColor=vec3(0.,0.,0.);\\n#ifdef REFRACTION\\nvec3 refractionVector=normalize(refract(-viewDirectionW,normalW,vRefractionInfos.y));\\n#ifdef REFRACTIONMAP_3D\\nrefractionVector.y=refractionVector.y*vRefractionInfos.w;\\nif (dot(refractionVector,viewDirectionW)<1.0) {\\nrefractionColor=textureCube(refractionCubeSampler,refractionVector).rgb;\\n}\\n#else\\nvec3 vRefractionUVW=vec3(refractionMatrix*(view*vec4(vPositionW+refractionVector*vRefractionInfos.z,1.0)));\\nvec2 refractionCoords=vRefractionUVW.xy/vRefractionUVW.z;\\nrefractionCoords.y=1.0-refractionCoords.y;\\nrefractionColor=texture2D(refraction2DSampler,refractionCoords).rgb;\\n#endif\\n#ifdef IS_REFRACTION_LINEAR\\nrefractionColor=toGammaSpace(refractionColor);\\n#endif\\nrefractionColor*=vRefractionInfos.x;\\n#endif\\n\\nvec3 reflectionColor=vec3(0.,0.,0.);\\n#ifdef REFLECTION\\nvec3 vReflectionUVW=computeReflectionCoords(vec4(vPositionW,1.0),normalW);\\n#ifdef REFLECTIONMAP_3D\\n#ifdef ROUGHNESS\\nfloat bias=vReflectionInfos.y;\\n#ifdef SPECULARTERM\\n#ifdef SPECULAR\\n#ifdef GLOSSINESS\\nbias*=(1.0-specularMapColor.a);\\n#endif\\n#endif\\n#endif\\nreflectionColor=textureCube(reflectionCubeSampler,vReflectionUVW,bias).rgb;\\n#else\\nreflectionColor=textureCube(reflectionCubeSampler,vReflectionUVW).rgb;\\n#endif\\n#else\\nvec2 coords=vReflectionUVW.xy;\\n#ifdef REFLECTIONMAP_PROJECTION\\ncoords/=vReflectionUVW.z;\\n#endif\\ncoords.y=1.0-coords.y;\\nreflectionColor=texture2D(reflection2DSampler,coords).rgb;\\n#endif\\n#ifdef IS_REFLECTION_LINEAR\\nreflectionColor=toGammaSpace(reflectionColor);\\n#endif\\nreflectionColor*=vReflectionInfos.x;\\n#ifdef REFLECTIONFRESNEL\\nfloat reflectionFresnelTerm=computeFresnelTerm(viewDirectionW,normalW,reflectionRightColor.a,reflectionLeftColor.a);\\n#ifdef REFLECTIONFRESNELFROMSPECULAR\\n#ifdef SPECULARTERM\\nreflectionColor*=specularColor.rgb*(1.0-reflectionFresnelTerm)+reflectionFresnelTerm*reflectionRightColor.rgb;\\n#else\\nreflectionColor*=reflectionLeftColor.rgb*(1.0-reflectionFresnelTerm)+reflectionFresnelTerm*reflectionRightColor.rgb;\\n#endif\\n#else\\nreflectionColor*=reflectionLeftColor.rgb*(1.0-reflectionFresnelTerm)+reflectionFresnelTerm*reflectionRightColor.rgb;\\n#endif\\n#endif\\n#endif\\n#ifdef REFRACTIONFRESNEL\\nfloat refractionFresnelTerm=computeFresnelTerm(viewDirectionW,normalW,refractionRightColor.a,refractionLeftColor.a);\\nrefractionColor*=refractionLeftColor.rgb*(1.0-refractionFresnelTerm)+refractionFresnelTerm*refractionRightColor.rgb;\\n#endif\\n#ifdef OPACITY\\nvec4 opacityMap=texture2D(opacitySampler,vOpacityUV+uvOffset);\\n#ifdef OPACITYRGB\\nopacityMap.rgb=opacityMap.rgb*vec3(0.3,0.59,0.11);\\nalpha*=(opacityMap.x+opacityMap.y+opacityMap.z)* vOpacityInfos.y;\\n#else\\nalpha*=opacityMap.a*vOpacityInfos.y;\\n#endif\\n#endif\\n#ifdef VERTEXALPHA\\nalpha*=vColor.a;\\n#endif\\n#ifdef OPACITYFRESNEL\\nfloat opacityFresnelTerm=computeFresnelTerm(viewDirectionW,normalW,opacityParts.z,opacityParts.w);\\nalpha+=opacityParts.x*(1.0-opacityFresnelTerm)+opacityFresnelTerm*opacityParts.y;\\n#endif\\n\\nvec3 emissiveColor=vEmissiveColor;\\n#ifdef EMISSIVE\\nemissiveColor+=texture2D(emissiveSampler,vEmissiveUV+uvOffset).rgb*vEmissiveInfos.y;\\n#endif\\n#ifdef EMISSIVEFRESNEL\\nfloat emissiveFresnelTerm=computeFresnelTerm(viewDirectionW,normalW,emissiveRightColor.a,emissiveLeftColor.a);\\nemissiveColor*=emissiveLeftColor.rgb*(1.0-emissiveFresnelTerm)+emissiveFresnelTerm*emissiveRightColor.rgb;\\n#endif\\n\\n#ifdef DIFFUSEFRESNEL\\nfloat diffuseFresnelTerm=computeFresnelTerm(viewDirectionW,normalW,diffuseRightColor.a,diffuseLeftColor.a);\\ndiffuseBase*=diffuseLeftColor.rgb*(1.0-diffuseFresnelTerm)+diffuseFresnelTerm*diffuseRightColor.rgb;\\n#endif\\n\\n#ifdef EMISSIVEASILLUMINATION\\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor+vAmbientColor,0.0,1.0)*baseColor.rgb;\\n#else\\n#ifdef LINKEMISSIVEWITHDIFFUSE\\nvec3 finalDiffuse=clamp((diffuseBase+emissiveColor)*diffuseColor+vAmbientColor,0.0,1.0)*baseColor.rgb;\\n#else\\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor+emissiveColor+vAmbientColor,0.0,1.0)*baseColor.rgb;\\n#endif\\n#endif\\n#ifdef SPECULARTERM\\nvec3 finalSpecular=specularBase*specularColor;\\n#ifdef SPECULAROVERALPHA\\nalpha=clamp(alpha+dot(finalSpecular,vec3(0.3,0.59,0.11)),0.,1.);\\n#endif\\n#else\\nvec3 finalSpecular=vec3(0.0);\\n#endif\\n#ifdef REFLECTIONOVERALPHA\\nalpha=clamp(alpha+dot(reflectionColor,vec3(0.3,0.59,0.11)),0.,1.);\\n#endif\\n\\n#ifdef EMISSIVEASILLUMINATION\\nvec4 color=vec4(clamp(finalDiffuse*baseAmbientColor+finalSpecular+reflectionColor+emissiveColor+refractionColor,0.0,1.0),alpha);\\n#else\\nvec4 color=vec4(finalDiffuse*baseAmbientColor+finalSpecular+reflectionColor+refractionColor,alpha);\\n#endif\\n\\n#ifdef LIGHTMAP\\n#ifndef LIGHTMAPEXCLUDED\\n#ifdef USELIGHTMAPASSHADOWMAP\\ncolor.rgb*=lightmapColor;\\n#else\\ncolor.rgb+=lightmapColor;\\n#endif\\n#endif\\n#endif\\n#define CUSTOM_FRAGMENT_BEFORE_FOG\\ncolor.rgb=max(color.rgb,0.);\\n#include<logDepthFragment>\\n#include<fogFragment>\\n\\n\\n#ifdef IMAGEPROCESSINGPOSTPROCESS\\ncolor.rgb=toLinearSpace(color.rgb);\\n#else\\n#ifdef IMAGEPROCESSING\\ncolor.rgb=toLinearSpace(color.rgb);\\ncolor=applyImageProcessing(color);\\n#endif\\n#endif\\ncolor.a*=visibility;\\n#ifdef PREMULTIPLYALPHA\\n\\ncolor.rgb*=color.a;\\n#endif\\n#define CUSTOM_FRAGMENT_BEFORE_FRAGCOLOR\\ngl_FragColor=color;\\n}\\n\";e.Effect.ShadersStore[n]=i;var r={name:n,shader:i};exports.defaultPixelShader=r;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":380,"column":7},"generated":{"line":1,"column":0}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":380,"column":7},"generated":{"line":1,"column":13}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":380,"column":7},"generated":{"line":1,"column":20}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":380,"column":7},"generated":{"line":1,"column":35}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":380,"column":7},"generated":{"line":1,"column":43}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":380,"column":7},"generated":{"line":1,"column":56}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":380,"column":7},"generated":{"line":1,"column":57}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":380,"column":7},"generated":{"line":1,"column":64}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":380,"column":7},"generated":{"line":1,"column":68}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":380,"column":7},"generated":{"line":1,"column":76}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":380,"column":7},"generated":{"line":1,"column":100}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":102}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":106}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":108}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":116}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":139}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":147}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":194}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":202}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":244}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":252}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":1,"column":288}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":1,"column":296}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":1,"column":341}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":1,"column":349}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":7,"column":0},"generated":{"line":1,"column":389}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":7,"column":0},"generated":{"line":1,"column":397}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":1,"column":441}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":1,"column":449}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":9,"column":0},"generated":{"line":1,"column":494}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":9,"column":0},"generated":{"line":1,"column":502}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":10,"column":0},"generated":{"line":1,"column":538}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":10,"column":0},"generated":{"line":1,"column":546}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":11,"column":0},"generated":{"line":1,"column":585}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":11,"column":0},"generated":{"line":1,"column":593}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":1,"column":640}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":1,"column":648}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":1,"column":693}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":1,"column":701}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":14,"column":0},"generated":{"line":1,"column":743}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":14,"column":0},"generated":{"line":1,"column":751}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":1,"column":800}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":1,"column":808}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":1,"column":848}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":1,"column":856}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":1,"column":899}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":1,"column":907}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":1,"column":945}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":1,"column":953}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":1,"column":986}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":1,"column":994}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":1,"column":1027}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":1,"column":1035}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":1069}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":1077}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":1,"column":1114}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":1,"column":1122}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":1,"column":1154}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":24,"column":4},"generated":{"line":1,"column":1158}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":24,"column":11},"generated":{"line":1,"column":1160}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":25,"column":4},"generated":{"line":1,"column":1181}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":25,"column":13},"generated":{"line":1,"column":1183}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":378,"column":0},"generated":{"line":1,"column":11063}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":378,"column":7},"generated":{"line":1,"column":11065}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":378,"column":7},"generated":{"line":1,"column":11072}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":378,"column":20},"generated":{"line":1,"column":11085}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":378,"column":28},"generated":{"line":1,"column":11088}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":380,"column":7},"generated":{"line":1,"column":11090}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":380,"column":11},"generated":{"line":1,"column":11094}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":380,"column":32},"generated":{"line":1,"column":11096}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":380,"column":34},"generated":{"line":1,"column":11097}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":380,"column":38},"generated":{"line":1,"column":11102}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":380,"column":40},"generated":{"line":1,"column":11104}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":380,"column":46},"generated":{"line":1,"column":11111}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":380,"column":7},"generated":{"line":1,"column":11114}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":380,"column":7},"generated":{"line":1,"column":11122}},{"source":"../../../sourceES6/core/Shaders/default.fragment.ts","name":null,"original":{"line":380,"column":7},"generated":{"line":1,"column":11141}}],"sources":{"../../../sourceES6/core/Shaders/default.fragment.ts":"import { Effect } from \"../Materials/effect\";\nimport \"./ShadersInclude/defaultFragmentDeclaration\";\nimport \"./ShadersInclude/defaultUboDeclaration\";\nimport \"./ShadersInclude/helperFunctions\";\nimport \"./ShadersInclude/lightFragmentDeclaration\";\nimport \"./ShadersInclude/lightUboDeclaration\";\nimport \"./ShadersInclude/lightsFragmentFunctions\";\nimport \"./ShadersInclude/shadowsFragmentFunctions\";\nimport \"./ShadersInclude/fresnelFunction\";\nimport \"./ShadersInclude/reflectionFunction\";\nimport \"./ShadersInclude/imageProcessingDeclaration\";\nimport \"./ShadersInclude/imageProcessingFunctions\";\nimport \"./ShadersInclude/bumpFragmentFunctions\";\nimport \"./ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"./ShadersInclude/logDepthDeclaration\";\nimport \"./ShadersInclude/fogFragmentDeclaration\";\nimport \"./ShadersInclude/clipPlaneFragment\";\nimport \"./ShadersInclude/bumpFragment\";\nimport \"./ShadersInclude/depthPrePass\";\nimport \"./ShadersInclude/lightFragment\";\nimport \"./ShadersInclude/logDepthFragment\";\nimport \"./ShadersInclude/fogFragment\";\n\nlet name = 'defaultPixelShader';\nlet shader = `#include<__decl__defaultFragment>\n#if defined(BUMP) || !defined(NORMAL)\n#extension GL_OES_standard_derivatives : enable\n#endif\n#define CUSTOM_FRAGMENT_BEGIN\n#ifdef LOGARITHMICDEPTH\n#extension GL_EXT_frag_depth : enable\n#endif\n\n#define RECIPROCAL_PI2 0.15915494\nuniform vec3 vEyePosition;\nuniform vec3 vAmbientColor;\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#ifdef MAINUV1\nvarying vec2 vMainUV1;\n#endif\n#ifdef MAINUV2\nvarying vec2 vMainUV2;\n#endif\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n\n#ifdef DIFFUSE\n#if DIFFUSEDIRECTUV == 1\n#define vDiffuseUV vMainUV1\n#elif DIFFUSEDIRECTUV == 2\n#define vDiffuseUV vMainUV2\n#else\nvarying vec2 vDiffuseUV;\n#endif\nuniform sampler2D diffuseSampler;\n#endif\n#ifdef AMBIENT\n#if AMBIENTDIRECTUV == 1\n#define vAmbientUV vMainUV1\n#elif AMBIENTDIRECTUV == 2\n#define vAmbientUV vMainUV2\n#else\nvarying vec2 vAmbientUV;\n#endif\nuniform sampler2D ambientSampler;\n#endif\n#ifdef OPACITY\n#if OPACITYDIRECTUV == 1\n#define vOpacityUV vMainUV1\n#elif OPACITYDIRECTUV == 2\n#define vOpacityUV vMainUV2\n#else\nvarying vec2 vOpacityUV;\n#endif\nuniform sampler2D opacitySampler;\n#endif\n#ifdef EMISSIVE\n#if EMISSIVEDIRECTUV == 1\n#define vEmissiveUV vMainUV1\n#elif EMISSIVEDIRECTUV == 2\n#define vEmissiveUV vMainUV2\n#else\nvarying vec2 vEmissiveUV;\n#endif\nuniform sampler2D emissiveSampler;\n#endif\n#ifdef LIGHTMAP\n#if LIGHTMAPDIRECTUV == 1\n#define vLightmapUV vMainUV1\n#elif LIGHTMAPDIRECTUV == 2\n#define vLightmapUV vMainUV2\n#else\nvarying vec2 vLightmapUV;\n#endif\nuniform sampler2D lightmapSampler;\n#endif\n#ifdef REFRACTION\n#ifdef REFRACTIONMAP_3D\nuniform samplerCube refractionCubeSampler;\n#else\nuniform sampler2D refraction2DSampler;\n#endif\n#endif\n#if defined(SPECULAR) && defined(SPECULARTERM)\n#if SPECULARDIRECTUV == 1\n#define vSpecularUV vMainUV1\n#elif SPECULARDIRECTUV == 2\n#define vSpecularUV vMainUV2\n#else\nvarying vec2 vSpecularUV;\n#endif\nuniform sampler2D specularSampler;\n#endif\n#ifdef ALPHATEST\nuniform float alphaCutOff;\n#endif\n\n#include<fresnelFunction>\n\n#ifdef REFLECTION\n#ifdef REFLECTIONMAP_3D\nuniform samplerCube reflectionCubeSampler;\n#else\nuniform sampler2D reflection2DSampler;\n#endif\n#ifdef REFLECTIONMAP_SKYBOX\nvarying vec3 vPositionUVW;\n#else\n#if defined(REFLECTIONMAP_EQUIRECTANGULAR_FIXED) || defined(REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED)\nvarying vec3 vDirectionW;\n#endif\n#endif\n#include<reflectionFunction>\n#endif\n#include<imageProcessingDeclaration>\n#include<imageProcessingFunctions>\n#include<bumpFragmentFunctions>\n#include<clipPlaneFragmentDeclaration>\n#include<logDepthDeclaration>\n#include<fogFragmentDeclaration>\n#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void) {\n#define CUSTOM_FRAGMENT_MAIN_BEGIN\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\nvec4 baseColor=vec4(1.,1.,1.,1.);\nvec3 diffuseColor=vDiffuseColor.rgb;\n\nfloat alpha=vDiffuseColor.a;\n\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\n#else\nvec3 normalW=normalize(-cross(dFdx(vPositionW),dFdy(vPositionW)));\n#endif\n#include<bumpFragment>\n#ifdef TWOSIDEDLIGHTING\nnormalW=gl_FrontFacing ? normalW : -normalW;\n#endif\n#ifdef DIFFUSE\nbaseColor=texture2D(diffuseSampler,vDiffuseUV+uvOffset);\n#ifdef ALPHATEST\nif (baseColor.a<alphaCutOff)\ndiscard;\n#endif\n#ifdef ALPHAFROMDIFFUSE\nalpha*=baseColor.a;\n#endif\n#define CUSTOM_FRAGMENT_UPDATE_ALPHA\nbaseColor.rgb*=vDiffuseInfos.y;\n#endif\n#include<depthPrePass>\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\n#define CUSTOM_FRAGMENT_UPDATE_DIFFUSE\n\nvec3 baseAmbientColor=vec3(1.,1.,1.);\n#ifdef AMBIENT\nbaseAmbientColor=texture2D(ambientSampler,vAmbientUV+uvOffset).rgb*vAmbientInfos.y;\n#endif\n#define CUSTOM_FRAGMENT_BEFORE_LIGHTS\n\n#ifdef SPECULARTERM\nfloat glossiness=vSpecularColor.a;\nvec3 specularColor=vSpecularColor.rgb;\n#ifdef SPECULAR\nvec4 specularMapColor=texture2D(specularSampler,vSpecularUV+uvOffset);\nspecularColor=specularMapColor.rgb;\n#ifdef GLOSSINESS\nglossiness=glossiness*specularMapColor.a;\n#endif\n#endif\n#else\nfloat glossiness=0.;\n#endif\n\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\n#ifdef SPECULARTERM\nvec3 specularBase=vec3(0.,0.,0.);\n#endif\nfloat shadow=1.;\n#ifdef LIGHTMAP\nvec3 lightmapColor=texture2D(lightmapSampler,vLightmapUV+uvOffset).rgb*vLightmapInfos.y;\n#endif\n#include<lightFragment>[0..maxSimultaneousLights]\n\nvec3 refractionColor=vec3(0.,0.,0.);\n#ifdef REFRACTION\nvec3 refractionVector=normalize(refract(-viewDirectionW,normalW,vRefractionInfos.y));\n#ifdef REFRACTIONMAP_3D\nrefractionVector.y=refractionVector.y*vRefractionInfos.w;\nif (dot(refractionVector,viewDirectionW)<1.0) {\nrefractionColor=textureCube(refractionCubeSampler,refractionVector).rgb;\n}\n#else\nvec3 vRefractionUVW=vec3(refractionMatrix*(view*vec4(vPositionW+refractionVector*vRefractionInfos.z,1.0)));\nvec2 refractionCoords=vRefractionUVW.xy/vRefractionUVW.z;\nrefractionCoords.y=1.0-refractionCoords.y;\nrefractionColor=texture2D(refraction2DSampler,refractionCoords).rgb;\n#endif\n#ifdef IS_REFRACTION_LINEAR\nrefractionColor=toGammaSpace(refractionColor);\n#endif\nrefractionColor*=vRefractionInfos.x;\n#endif\n\nvec3 reflectionColor=vec3(0.,0.,0.);\n#ifdef REFLECTION\nvec3 vReflectionUVW=computeReflectionCoords(vec4(vPositionW,1.0),normalW);\n#ifdef REFLECTIONMAP_3D\n#ifdef ROUGHNESS\nfloat bias=vReflectionInfos.y;\n#ifdef SPECULARTERM\n#ifdef SPECULAR\n#ifdef GLOSSINESS\nbias*=(1.0-specularMapColor.a);\n#endif\n#endif\n#endif\nreflectionColor=textureCube(reflectionCubeSampler,vReflectionUVW,bias).rgb;\n#else\nreflectionColor=textureCube(reflectionCubeSampler,vReflectionUVW).rgb;\n#endif\n#else\nvec2 coords=vReflectionUVW.xy;\n#ifdef REFLECTIONMAP_PROJECTION\ncoords/=vReflectionUVW.z;\n#endif\ncoords.y=1.0-coords.y;\nreflectionColor=texture2D(reflection2DSampler,coords).rgb;\n#endif\n#ifdef IS_REFLECTION_LINEAR\nreflectionColor=toGammaSpace(reflectionColor);\n#endif\nreflectionColor*=vReflectionInfos.x;\n#ifdef REFLECTIONFRESNEL\nfloat reflectionFresnelTerm=computeFresnelTerm(viewDirectionW,normalW,reflectionRightColor.a,reflectionLeftColor.a);\n#ifdef REFLECTIONFRESNELFROMSPECULAR\n#ifdef SPECULARTERM\nreflectionColor*=specularColor.rgb*(1.0-reflectionFresnelTerm)+reflectionFresnelTerm*reflectionRightColor.rgb;\n#else\nreflectionColor*=reflectionLeftColor.rgb*(1.0-reflectionFresnelTerm)+reflectionFresnelTerm*reflectionRightColor.rgb;\n#endif\n#else\nreflectionColor*=reflectionLeftColor.rgb*(1.0-reflectionFresnelTerm)+reflectionFresnelTerm*reflectionRightColor.rgb;\n#endif\n#endif\n#endif\n#ifdef REFRACTIONFRESNEL\nfloat refractionFresnelTerm=computeFresnelTerm(viewDirectionW,normalW,refractionRightColor.a,refractionLeftColor.a);\nrefractionColor*=refractionLeftColor.rgb*(1.0-refractionFresnelTerm)+refractionFresnelTerm*refractionRightColor.rgb;\n#endif\n#ifdef OPACITY\nvec4 opacityMap=texture2D(opacitySampler,vOpacityUV+uvOffset);\n#ifdef OPACITYRGB\nopacityMap.rgb=opacityMap.rgb*vec3(0.3,0.59,0.11);\nalpha*=(opacityMap.x+opacityMap.y+opacityMap.z)* vOpacityInfos.y;\n#else\nalpha*=opacityMap.a*vOpacityInfos.y;\n#endif\n#endif\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\n#ifdef OPACITYFRESNEL\nfloat opacityFresnelTerm=computeFresnelTerm(viewDirectionW,normalW,opacityParts.z,opacityParts.w);\nalpha+=opacityParts.x*(1.0-opacityFresnelTerm)+opacityFresnelTerm*opacityParts.y;\n#endif\n\nvec3 emissiveColor=vEmissiveColor;\n#ifdef EMISSIVE\nemissiveColor+=texture2D(emissiveSampler,vEmissiveUV+uvOffset).rgb*vEmissiveInfos.y;\n#endif\n#ifdef EMISSIVEFRESNEL\nfloat emissiveFresnelTerm=computeFresnelTerm(viewDirectionW,normalW,emissiveRightColor.a,emissiveLeftColor.a);\nemissiveColor*=emissiveLeftColor.rgb*(1.0-emissiveFresnelTerm)+emissiveFresnelTerm*emissiveRightColor.rgb;\n#endif\n\n#ifdef DIFFUSEFRESNEL\nfloat diffuseFresnelTerm=computeFresnelTerm(viewDirectionW,normalW,diffuseRightColor.a,diffuseLeftColor.a);\ndiffuseBase*=diffuseLeftColor.rgb*(1.0-diffuseFresnelTerm)+diffuseFresnelTerm*diffuseRightColor.rgb;\n#endif\n\n#ifdef EMISSIVEASILLUMINATION\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor+vAmbientColor,0.0,1.0)*baseColor.rgb;\n#else\n#ifdef LINKEMISSIVEWITHDIFFUSE\nvec3 finalDiffuse=clamp((diffuseBase+emissiveColor)*diffuseColor+vAmbientColor,0.0,1.0)*baseColor.rgb;\n#else\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor+emissiveColor+vAmbientColor,0.0,1.0)*baseColor.rgb;\n#endif\n#endif\n#ifdef SPECULARTERM\nvec3 finalSpecular=specularBase*specularColor;\n#ifdef SPECULAROVERALPHA\nalpha=clamp(alpha+dot(finalSpecular,vec3(0.3,0.59,0.11)),0.,1.);\n#endif\n#else\nvec3 finalSpecular=vec3(0.0);\n#endif\n#ifdef REFLECTIONOVERALPHA\nalpha=clamp(alpha+dot(reflectionColor,vec3(0.3,0.59,0.11)),0.,1.);\n#endif\n\n#ifdef EMISSIVEASILLUMINATION\nvec4 color=vec4(clamp(finalDiffuse*baseAmbientColor+finalSpecular+reflectionColor+emissiveColor+refractionColor,0.0,1.0),alpha);\n#else\nvec4 color=vec4(finalDiffuse*baseAmbientColor+finalSpecular+reflectionColor+refractionColor,alpha);\n#endif\n\n#ifdef LIGHTMAP\n#ifndef LIGHTMAPEXCLUDED\n#ifdef USELIGHTMAPASSHADOWMAP\ncolor.rgb*=lightmapColor;\n#else\ncolor.rgb+=lightmapColor;\n#endif\n#endif\n#endif\n#define CUSTOM_FRAGMENT_BEFORE_FOG\ncolor.rgb=max(color.rgb,0.);\n#include<logDepthFragment>\n#include<fogFragment>\n\n\n#ifdef IMAGEPROCESSINGPOSTPROCESS\ncolor.rgb=toLinearSpace(color.rgb);\n#else\n#ifdef IMAGEPROCESSING\ncolor.rgb=toLinearSpace(color.rgb);\ncolor=applyImageProcessing(color);\n#endif\n#endif\ncolor.a*=visibility;\n#ifdef PREMULTIPLYALPHA\n\ncolor.rgb*=color.a;\n#endif\n#define CUSTOM_FRAGMENT_BEFORE_FRAGCOLOR\ngl_FragColor=color;\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var defaultPixelShader = { name, shader };\n"},"lineCount":null}},"error":null,"hash":"1b4555b7f6f4ca5d85c14db0b260bd93","cacheData":{"env":{}}}