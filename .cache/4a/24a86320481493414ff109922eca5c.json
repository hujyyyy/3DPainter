{"id":"oSUk","dependencies":[{"name":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/particles.vertex.js.map","includedInParent":true,"mtime":1556745100000},{"name":"/Users/hujy/GT/Spring20/3DU/3DPainter/package.json","includedInParent":true,"mtime":1588539929318},{"name":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/package.json","includedInParent":true,"mtime":1588537596306},{"name":"../Materials/effect","loc":{"line":1,"column":23},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/particles.vertex.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Materials/effect.js"},{"name":"./ShadersInclude/clipPlaneVertexDeclaration","loc":{"line":2,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/particles.vertex.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/clipPlaneVertexDeclaration.js"},{"name":"./ShadersInclude/clipPlaneVertex","loc":{"line":3,"column":7},"parent":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/particles.vertex.js","resolved":"/Users/hujy/GT/Spring20/3DU/3DPainter/node_modules/@babylonjs/core/Shaders/ShadersInclude/clipPlaneVertex.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.particlesVertexShader=void 0;var e=require(\"../Materials/effect\");require(\"./ShadersInclude/clipPlaneVertexDeclaration\"),require(\"./ShadersInclude/clipPlaneVertex\");var n=\"particlesVertexShader\",r=\"\\nattribute vec3 position;\\nattribute vec4 color;\\nattribute float angle;\\nattribute vec2 size;\\n#ifdef ANIMATESHEET\\nattribute float cellIndex;\\n#endif\\n#ifndef BILLBOARD\\nattribute vec3 direction;\\n#endif\\n#ifdef BILLBOARDSTRETCHED\\nattribute vec3 direction;\\n#endif\\n#ifdef RAMPGRADIENT\\nattribute vec4 remapData;\\n#endif\\nattribute vec2 offset;\\n\\nuniform mat4 view;\\nuniform mat4 projection;\\nuniform vec2 translationPivot;\\n#ifdef ANIMATESHEET\\nuniform vec3 particlesInfos;\\n#endif\\n\\nvarying vec2 vUV;\\nvarying vec4 vColor;\\n#ifdef RAMPGRADIENT\\nvarying vec4 remapRanges;\\n#endif\\n#if defined(CLIPPLANE) || defined(CLIPPLANE2) || defined(CLIPPLANE3) || defined(CLIPPLANE4)\\nuniform mat4 invView;\\n#endif\\n#include<clipPlaneVertexDeclaration>\\n#ifdef BILLBOARD\\nuniform vec3 eyePosition;\\n#endif\\nvec3 rotate(vec3 yaxis,vec3 rotatedCorner) {\\nvec3 xaxis=normalize(cross(vec3(0.,1.0,0.),yaxis));\\nvec3 zaxis=normalize(cross(yaxis,xaxis));\\nvec3 row0=vec3(xaxis.x,xaxis.y,xaxis.z);\\nvec3 row1=vec3(yaxis.x,yaxis.y,yaxis.z);\\nvec3 row2=vec3(zaxis.x,zaxis.y,zaxis.z);\\nmat3 rotMatrix=mat3(row0,row1,row2);\\nvec3 alignedCorner=rotMatrix*rotatedCorner;\\nreturn position+alignedCorner;\\n}\\n#ifdef BILLBOARDSTRETCHED\\nvec3 rotateAlign(vec3 toCamera,vec3 rotatedCorner) {\\nvec3 normalizedToCamera=normalize(toCamera);\\nvec3 normalizedCrossDirToCamera=normalize(cross(normalize(direction),normalizedToCamera));\\nvec3 crossProduct=normalize(cross(normalizedToCamera,normalizedCrossDirToCamera));\\nvec3 row0=vec3(normalizedCrossDirToCamera.x,normalizedCrossDirToCamera.y,normalizedCrossDirToCamera.z);\\nvec3 row1=vec3(crossProduct.x,crossProduct.y,crossProduct.z);\\nvec3 row2=vec3(normalizedToCamera.x,normalizedToCamera.y,normalizedToCamera.z);\\nmat3 rotMatrix=mat3(row0,row1,row2);\\nvec3 alignedCorner=rotMatrix*rotatedCorner;\\nreturn position+alignedCorner;\\n}\\n#endif\\nvoid main(void) {\\nvec2 cornerPos;\\ncornerPos=(vec2(offset.x-0.5,offset.y-0.5)-translationPivot)*size+translationPivot;\\n#ifdef BILLBOARD\\n\\nvec3 rotatedCorner;\\n#ifdef BILLBOARDY\\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\\nrotatedCorner.z=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\\nrotatedCorner.y=0.;\\nvec3 yaxis=position-eyePosition;\\nyaxis.y=0.;\\nvec3 worldPos=rotate(normalize(yaxis),rotatedCorner);\\nvec3 viewPos=(view*vec4(worldPos,1.0)).xyz;\\n#elif defined(BILLBOARDSTRETCHED)\\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\\nrotatedCorner.y=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\\nrotatedCorner.z=0.;\\nvec3 toCamera=position-eyePosition;\\nvec3 worldPos=rotateAlign(toCamera,rotatedCorner);\\nvec3 viewPos=(view*vec4(worldPos,1.0)).xyz;\\n#else\\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\\nrotatedCorner.y=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\\nrotatedCorner.z=0.;\\nvec3 viewPos=(view*vec4(position,1.0)).xyz+rotatedCorner;\\n#endif\\n#ifdef RAMPGRADIENT\\nremapRanges=remapData;\\n#endif\\n\\ngl_Position=projection*vec4(viewPos,1.0);\\n#else\\n\\nvec3 rotatedCorner;\\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\\nrotatedCorner.z=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\\nrotatedCorner.y=0.;\\nvec3 yaxis=normalize(direction);\\nvec3 worldPos=rotate(yaxis,rotatedCorner);\\ngl_Position=projection*view*vec4(worldPos,1.0);\\n#endif\\nvColor=color;\\n#ifdef ANIMATESHEET\\nfloat rowOffset=floor(cellIndex/particlesInfos.z);\\nfloat columnOffset=cellIndex-rowOffset*particlesInfos.z;\\nvec2 uvScale=particlesInfos.xy;\\nvec2 uvOffset=vec2(offset.x ,1.0-offset.y);\\nvUV=(uvOffset+vec2(columnOffset,rowOffset))*uvScale;\\n#else\\nvUV=offset;\\n#endif\\n\\n#if defined(CLIPPLANE) || defined(CLIPPLANE2) || defined(CLIPPLANE3) || defined(CLIPPLANE4)\\nvec4 worldPos=invView*vec4(viewPos,1.0);\\n#endif\\n#include<clipPlaneVertex>\\n}\";e.Effect.ShadersStore[n]=r;var o={name:n,shader:r};exports.particlesVertexShader=o;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":128,"column":7},"generated":{"line":1,"column":0}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":128,"column":7},"generated":{"line":1,"column":13}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":128,"column":7},"generated":{"line":1,"column":20}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":128,"column":7},"generated":{"line":1,"column":35}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":128,"column":7},"generated":{"line":1,"column":43}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":128,"column":7},"generated":{"line":1,"column":56}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":128,"column":7},"generated":{"line":1,"column":57}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":128,"column":7},"generated":{"line":1,"column":64}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":128,"column":7},"generated":{"line":1,"column":68}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":128,"column":7},"generated":{"line":1,"column":76}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":128,"column":7},"generated":{"line":1,"column":103}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":105}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":109}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":111}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":119}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":142}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":150}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":197}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":205}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":1,"column":241}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":5,"column":4},"generated":{"line":1,"column":245}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":5,"column":11},"generated":{"line":1,"column":247}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":6,"column":4},"generated":{"line":1,"column":271}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":6,"column":13},"generated":{"line":1,"column":273}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":126,"column":0},"generated":{"line":1,"column":4052}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":126,"column":7},"generated":{"line":1,"column":4054}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":126,"column":7},"generated":{"line":1,"column":4061}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":126,"column":20},"generated":{"line":1,"column":4074}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":126,"column":28},"generated":{"line":1,"column":4077}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":128,"column":7},"generated":{"line":1,"column":4079}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":128,"column":11},"generated":{"line":1,"column":4083}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":128,"column":35},"generated":{"line":1,"column":4085}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":128,"column":37},"generated":{"line":1,"column":4086}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":128,"column":41},"generated":{"line":1,"column":4091}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":128,"column":43},"generated":{"line":1,"column":4093}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":128,"column":49},"generated":{"line":1,"column":4100}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":128,"column":7},"generated":{"line":1,"column":4103}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":128,"column":7},"generated":{"line":1,"column":4111}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":128,"column":7},"generated":{"line":1,"column":4133}}],"sources":{"../../../sourceES6/core/Shaders/particles.vertex.ts":"import { Effect } from \"../Materials/effect\";\nimport \"./ShadersInclude/clipPlaneVertexDeclaration\";\nimport \"./ShadersInclude/clipPlaneVertex\";\n\nlet name = 'particlesVertexShader';\nlet shader = `\nattribute vec3 position;\nattribute vec4 color;\nattribute float angle;\nattribute vec2 size;\n#ifdef ANIMATESHEET\nattribute float cellIndex;\n#endif\n#ifndef BILLBOARD\nattribute vec3 direction;\n#endif\n#ifdef BILLBOARDSTRETCHED\nattribute vec3 direction;\n#endif\n#ifdef RAMPGRADIENT\nattribute vec4 remapData;\n#endif\nattribute vec2 offset;\n\nuniform mat4 view;\nuniform mat4 projection;\nuniform vec2 translationPivot;\n#ifdef ANIMATESHEET\nuniform vec3 particlesInfos;\n#endif\n\nvarying vec2 vUV;\nvarying vec4 vColor;\n#ifdef RAMPGRADIENT\nvarying vec4 remapRanges;\n#endif\n#if defined(CLIPPLANE) || defined(CLIPPLANE2) || defined(CLIPPLANE3) || defined(CLIPPLANE4)\nuniform mat4 invView;\n#endif\n#include<clipPlaneVertexDeclaration>\n#ifdef BILLBOARD\nuniform vec3 eyePosition;\n#endif\nvec3 rotate(vec3 yaxis,vec3 rotatedCorner) {\nvec3 xaxis=normalize(cross(vec3(0.,1.0,0.),yaxis));\nvec3 zaxis=normalize(cross(yaxis,xaxis));\nvec3 row0=vec3(xaxis.x,xaxis.y,xaxis.z);\nvec3 row1=vec3(yaxis.x,yaxis.y,yaxis.z);\nvec3 row2=vec3(zaxis.x,zaxis.y,zaxis.z);\nmat3 rotMatrix=mat3(row0,row1,row2);\nvec3 alignedCorner=rotMatrix*rotatedCorner;\nreturn position+alignedCorner;\n}\n#ifdef BILLBOARDSTRETCHED\nvec3 rotateAlign(vec3 toCamera,vec3 rotatedCorner) {\nvec3 normalizedToCamera=normalize(toCamera);\nvec3 normalizedCrossDirToCamera=normalize(cross(normalize(direction),normalizedToCamera));\nvec3 crossProduct=normalize(cross(normalizedToCamera,normalizedCrossDirToCamera));\nvec3 row0=vec3(normalizedCrossDirToCamera.x,normalizedCrossDirToCamera.y,normalizedCrossDirToCamera.z);\nvec3 row1=vec3(crossProduct.x,crossProduct.y,crossProduct.z);\nvec3 row2=vec3(normalizedToCamera.x,normalizedToCamera.y,normalizedToCamera.z);\nmat3 rotMatrix=mat3(row0,row1,row2);\nvec3 alignedCorner=rotMatrix*rotatedCorner;\nreturn position+alignedCorner;\n}\n#endif\nvoid main(void) {\nvec2 cornerPos;\ncornerPos=(vec2(offset.x-0.5,offset.y-0.5)-translationPivot)*size+translationPivot;\n#ifdef BILLBOARD\n\nvec3 rotatedCorner;\n#ifdef BILLBOARDY\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\nrotatedCorner.z=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\nrotatedCorner.y=0.;\nvec3 yaxis=position-eyePosition;\nyaxis.y=0.;\nvec3 worldPos=rotate(normalize(yaxis),rotatedCorner);\nvec3 viewPos=(view*vec4(worldPos,1.0)).xyz;\n#elif defined(BILLBOARDSTRETCHED)\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\nrotatedCorner.y=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\nrotatedCorner.z=0.;\nvec3 toCamera=position-eyePosition;\nvec3 worldPos=rotateAlign(toCamera,rotatedCorner);\nvec3 viewPos=(view*vec4(worldPos,1.0)).xyz;\n#else\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\nrotatedCorner.y=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\nrotatedCorner.z=0.;\nvec3 viewPos=(view*vec4(position,1.0)).xyz+rotatedCorner;\n#endif\n#ifdef RAMPGRADIENT\nremapRanges=remapData;\n#endif\n\ngl_Position=projection*vec4(viewPos,1.0);\n#else\n\nvec3 rotatedCorner;\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\nrotatedCorner.z=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\nrotatedCorner.y=0.;\nvec3 yaxis=normalize(direction);\nvec3 worldPos=rotate(yaxis,rotatedCorner);\ngl_Position=projection*view*vec4(worldPos,1.0);\n#endif\nvColor=color;\n#ifdef ANIMATESHEET\nfloat rowOffset=floor(cellIndex/particlesInfos.z);\nfloat columnOffset=cellIndex-rowOffset*particlesInfos.z;\nvec2 uvScale=particlesInfos.xy;\nvec2 uvOffset=vec2(offset.x ,1.0-offset.y);\nvUV=(uvOffset+vec2(columnOffset,rowOffset))*uvScale;\n#else\nvUV=offset;\n#endif\n\n#if defined(CLIPPLANE) || defined(CLIPPLANE2) || defined(CLIPPLANE3) || defined(CLIPPLANE4)\nvec4 worldPos=invView*vec4(viewPos,1.0);\n#endif\n#include<clipPlaneVertex>\n}`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var particlesVertexShader = { name, shader };\n"},"lineCount":null}},"error":null,"hash":"1d98ce08c245469a0a0e03d46c67ed86","cacheData":{"env":{}}}